{
	"info": {
		"_postman_id": "38bdcc8a-02ba-4a3b-a13f-e7b5a240264b",
		"name": "Test Explore With Me - main service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2465623"
	},
	"item": [
		{
			"name": "admin",
			"item": [
				{
					"name": "categories",
					"item": [
						{
							"name": "Изменение категории",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var body = {};\r",
											"var bodyId = {};\r",
											"let name = 'name' + pm.collectionVariables.get(\"usersCount\");\r",
											"pm.collectionVariables.set('name', name)\r",
											"pm.collectionVariables.set(\"usersCount\", pm.collectionVariables.get(\"usersCount\") + 1)\r",
											"body = {\r",
											"    'name': name\r",
											"};\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"baseUrl\") + '/admin/categories',\r",
											"    method: 'POST',\r",
											"    body: JSON.stringify(body),\r",
											"    header: {'Content-Type': 'application/json'}\r",
											"}, (error, response) => {\r",
											"    if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"        throw new Error(\"Ошибка подготовки тестовых данных. Категория не создана: \" + error);\r",
											"    }\r",
											"    pm.collectionVariables.set('catid', response.json().id)\r",
											"    name = 'name' + pm.collectionVariables.get(\"usersCount\");\r",
											"    pm.collectionVariables.set('name', name)\r",
											"    pm.collectionVariables.set(\"usersCount\", pm.collectionVariables.get(\"usersCount\") + 1)\r",
											"    bodyId = {\r",
											"        'id': pm.collectionVariables.get('catid'),\r",
											"        'name': name\r",
											"    };\r",
											"    pm.collectionVariables.set('request_body', JSON.stringify(bodyId));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.sendRequest(pm.collectionVariables.get(\"baseUrl\") + '/categories?from=0&size=1000', (error, response) => {\r",
											"    if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"        throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"    }\r",
											"    pm.test(\"Test user\", function () {\r",
											"    var jsonData = response.json()[response.json().length - 1];\r",
											"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get('catid'));\r",
											"    pm.expect(jsonData.name).to.eql(pm.collectionVariables.get('name'));\r",
											"});\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"categories"
									]
								},
								"description": "Обратите внимание: имя категории должно быть уникальным"
							},
							"response": [
								{
									"name": "Данные категории изменены",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Концерты\",\n  \"id\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/admin/categories",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"categories"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"name\": \"Концерты\",\n  \"id\": 1\n}"
								},
								{
									"name": "Запрос составлен с ошибкой",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Концерты\",\n  \"id\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"categories"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"410 GONE\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Не выполнены условия для совершения операции",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Концерты\",\n  \"id\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"categories"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Объект не найден",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Концерты\",\n  \"id\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"categories"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"NOT_FOUND\",\n  \"reason\": \"The required object was not found.\",\n  \"message\": \"Event with id=21 was not found.\",\n  \"timestamp\": \"2022-09-07 09:10:50\"\n}"
								},
								{
									"name": "Запрос приводит к нарушению целостности данных",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Концерты\",\n  \"id\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"categories"
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"CONFLICT\",\n  \"reason\": \"Integrity constraint has been violated\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:47:58\"\n}"
								},
								{
									"name": "Внутренняя ошибка сервера",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Концерты\",\n  \"id\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"categories"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"INTERNAL_SERVER_ERROR\",\n  \"reason\": \"Error occurred\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:23:27\"\n}"
								}
							]
						},
						{
							"name": "Добавление новой категории",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var body = {};\r",
											"let name = 'name' + pm.collectionVariables.get(\"usersCount\");\r",
											"pm.collectionVariables.set('name', name)\r",
											"pm.collectionVariables.set(\"usersCount\", pm.collectionVariables.get(\"usersCount\") + 1)\r",
											"body = {\r",
											"    name: name\r",
											"};\r",
											"pm.collectionVariables.set('request_body', JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"catid\", pm.response.json().id);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.sendRequest(pm.collectionVariables.get(\"baseUrl\") + '/categories?from=0&size=1000', (error, response) => {\r",
											"    if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"        throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"    }\r",
											"    pm.test(\"Test user\", function () {\r",
											"    var jsonData = response.json()[response.json().length - 1];\r",
											"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get('catid'));\r",
											"    pm.expect(jsonData.name).to.eql(pm.collectionVariables.get('name'));\r",
											"});\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"categories"
									]
								},
								"description": "Обратите внимание: имя категории должно быть уникальным"
							},
							"response": [
								{
									"name": "Категория добавлена",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Концерты\",\n  \"id\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/admin/categories",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"categories"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"name\": \"Концерты\",\n  \"id\": 1\n}"
								},
								{
									"name": "Запрос составлен с ошибкой",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Концерты\",\n  \"id\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"categories"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Не выполнены условия для совершения операции",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Концерты\",\n  \"id\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"categories"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Объект не найден",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Концерты\",\n  \"id\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"categories"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"NOT_FOUND\",\n  \"reason\": \"The required object was not found.\",\n  \"message\": \"Event with id=21 was not found.\",\n  \"timestamp\": \"2022-09-07 09:10:50\"\n}"
								},
								{
									"name": "Запрос приводит к нарушению целостности данных",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Концерты\",\n  \"id\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"categories"
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"CONFLICT\",\n  \"reason\": \"Integrity constraint has been violated\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:47:58\"\n}"
								},
								{
									"name": "Внутренняя ошибка сервера",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Концерты\",\n  \"id\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"categories"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"INTERNAL_SERVER_ERROR\",\n  \"reason\": \"Error occurred\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:23:27\"\n}"
								}
							]
						},
						{
							"name": "Удаление категории",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var body = {};\r",
											"var bodyId = {};\r",
											"let name = 'name' + pm.collectionVariables.get(\"usersCount\");\r",
											"pm.collectionVariables.set('name', name)\r",
											"pm.collectionVariables.set(\"usersCount\", pm.collectionVariables.get(\"usersCount\") + 1)\r",
											"body = {\r",
											"    'name': name\r",
											"};\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"baseUrl\") + '/admin/categories',\r",
											"    method: 'POST',\r",
											"    body: JSON.stringify(body),\r",
											"    header: {'Content-Type': 'application/json'}\r",
											"}, (error, response) => {\r",
											"    if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"        throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"    }\r",
											"    pm.collectionVariables.set('catid', parseInt(response.json().id))\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/categories/:catId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"categories",
										":catId"
									],
									"variable": [
										{
											"key": "catId",
											"value": "{{catid}}"
										}
									]
								},
								"description": "Обратите внимание: с категорий не должно быть связано ни одного события."
							},
							"response": [
								{
									"name": "Категория удалена",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/categories/:catId?catId=32652613",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"categories",
												":catId"
											],
											"query": [
												{
													"key": "catId",
													"value": "32652613"
												}
											],
											"variable": [
												{
													"key": "catId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Запрос составлен с ошибкой",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/categories/:catId?catId=32652613",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"categories",
												":catId"
											],
											"query": [
												{
													"key": "catId",
													"value": "32652613"
												}
											],
											"variable": [
												{
													"key": "catId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Не выполнены условия для совершения операции",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/categories/:catId?catId=32652613",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"categories",
												":catId"
											],
											"query": [
												{
													"key": "catId",
													"value": "32652613"
												}
											],
											"variable": [
												{
													"key": "catId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Объект не найден",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/categories/:catId?catId=32652613",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"categories",
												":catId"
											],
											"query": [
												{
													"key": "catId",
													"value": "32652613"
												}
											],
											"variable": [
												{
													"key": "catId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"NOT_FOUND\",\n  \"reason\": \"The required object was not found.\",\n  \"message\": \"Event with id=21 was not found.\",\n  \"timestamp\": \"2022-09-07 09:10:50\"\n}"
								},
								{
									"name": "Запрос приводит к нарушению целостности данных",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/categories/:catId?catId=32652613",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"categories",
												":catId"
											],
											"query": [
												{
													"key": "catId",
													"value": "32652613"
												}
											],
											"variable": [
												{
													"key": "catId"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"CONFLICT\",\n  \"reason\": \"Integrity constraint has been violated\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:47:58\"\n}"
								},
								{
									"name": "Внутренняя ошибка сервера",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/categories/:catId?catId=32652613",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"categories",
												":catId"
											],
											"query": [
												{
													"key": "catId",
													"value": "32652613"
												}
											],
											"variable": [
												{
													"key": "catId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"INTERNAL_SERVER_ERROR\",\n  \"reason\": \"Error occurred\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:23:27\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "compilations",
					"item": [
						{
							"name": "Добавление новой подборки",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        compilation = rnd.getCompilation(event.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(compilation),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Подборка должны содержать поля: id, title, pinned, events\", function () {\r",
											"    pm.expect(target).to.have.all.keys('id', 'title', 'pinned', 'events');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.title).to.be.a(\"string\");\r",
											"    pm.expect(target.events).to.be.an(\"array\");\r",
											"\r",
											"    pm.expect(source.events[0]).equal(target.events[0].id);\r",
											"    pm.expect(source.title).equal(target.title);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/compilations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"compilations"
									]
								}
							},
							"response": [
								{
									"name": "Подборка добавлена",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"Летние веранды\",\n  \"events\": [\n    1,\n    2,\n    3\n  ],\n  \"pinned\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/admin/compilations",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"compilations"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"title\": \"Водные активности\",\n  \"events\": [\n    {\n      \"annotation\": \"Эксклюзивность нашего шоу гарантирует привлечение максимальной зрительской аудитории\",\n      \"category\": {\n        \"name\": \"Концерты\",\n        \"id\": 1\n      },\n      \"initiator\": {\n        \"id\": 3,\n        \"name\": \"Фёдоров Матвей\"\n      },\n      \"title\": \"Знаменитое шоу \\\"Летающая кукуруза\\\"\",\n      \"confirmedRequests\": 5,\n      \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n      \"id\": 1,\n      \"paid\": true,\n      \"views\": 999\n    }\n  ],\n  \"id\": 1,\n  \"pinned\": true\n}"
								},
								{
									"name": "Запрос составлен с ошибкой",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"Летние веранды\",\n  \"events\": [\n    1,\n    2,\n    3\n  ],\n  \"pinned\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/compilations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Не выполнены условия для совершения операции",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"Летние веранды\",\n  \"events\": [\n    1,\n    2,\n    3\n  ],\n  \"pinned\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/compilations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Объект не найден",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"Летние веранды\",\n  \"events\": [\n    1,\n    2,\n    3\n  ],\n  \"pinned\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/compilations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"NOT_FOUND\",\n  \"reason\": \"The required object was not found.\",\n  \"message\": \"Event with id=21 was not found.\",\n  \"timestamp\": \"2022-09-07 09:10:50\"\n}"
								},
								{
									"name": "Запрос приводит к нарушению целостности данных",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"Летние веранды\",\n  \"events\": [\n    1,\n    2,\n    3\n  ],\n  \"pinned\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/compilations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations"
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"CONFLICT\",\n  \"reason\": \"Integrity constraint has been violated\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:47:58\"\n}"
								},
								{
									"name": "Внутренняя ошибка сервера",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"Летние веранды\",\n  \"events\": [\n    1,\n    2,\n    3\n  ],\n  \"pinned\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/compilations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"INTERNAL_SERVER_ERROR\",\n  \"reason\": \"Error occurred\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:23:27\"\n}"
								},
								{
									"name": "Добавление новой подборки",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/compilations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Tue, 20 Sep 2022 21:13:27 GMT"
										},
										{
											"key": "Connection",
											"value": "close"
										}
									],
									"cookie": [],
									"body": "{\n    \"status\": \"BAD_REQUEST\",\n    \"reason\": \"Error occurred\",\n    \"message\": \"Required request body is missing: public ru.practicum.ewm.dto.CompilationDto ru.practicum.ewm.controller.admin.CompilationAdminController.saveCompilation(ru.practicum.ewm.dto.NewCompilationDto)\",\n    \"timestamp\": \"2022-09-21 00:13:27\"\n}"
								}
							]
						},
						{
							"name": "Удалить событие из подборки",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let counter = pm.collectionVariables.get(\"usersCount\");\r",
											"\r",
											"let user = {\r",
											"    'email': 'email' + counter + '@yandex.ru',\r",
											"    'name': 'Usver'\r",
											"};\r",
											"\r",
											"pm.sendRequest({\r",
											"        url: pm.collectionVariables.get(\"baseUrl\") + '/admin/users',\r",
											"        method: 'POST',\r",
											"        body: JSON.stringify(user),\r",
											"        header: {\r",
											"            'Content-Type': 'application/json'\r",
											"        }\r",
											"    },\r",
											"    (error, response) => {\r",
											"        if (error || (response.code >= 400 && response.code <= 599)) {\r",
											"            throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"        }\r",
											"        let userId = response.json().id;\r",
											"        let category = {\r",
											"            'name': 'name' + counter\r",
											"        };\r",
											"\r",
											"        pm.sendRequest({\r",
											"                url: pm.collectionVariables.get(\"baseUrl\") + '/admin/categories',\r",
											"                method: 'POST',\r",
											"                body: JSON.stringify(category),\r",
											"                header: {\r",
											"                    'Content-Type': 'application/json'\r",
											"                }\r",
											"            },\r",
											"            (error, response) => {\r",
											"                if (error || (response.code >= 400 && response.code <= 599)) {\r",
											"                    throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"                }\r",
											"                let event = {\r",
											"                    annotation: \"annotation169119129619612961691616161651651\",\r",
											"                    category: response.json().id,\r",
											"                    description: \"description9498465165165161616516516516516\",\r",
											"                    eventDate: \"2095-09-06 13:30:38\",\r",
											"                    location: {\r",
											"                        lat: 10,\r",
											"                        lon: 580,\r",
											"                    },\r",
											"                    paid: true,\r",
											"                    participantLimit: 0,\r",
											"                    requestModeration: true,\r",
											"                    title: \"title\",\r",
											"                };\r",
											"                pm.sendRequest({\r",
											"                        url: pm.collectionVariables.get(\"baseUrl\") + '/users/' + userId + '/events',\r",
											"                        method: 'POST',\r",
											"                        body: JSON.stringify(event),\r",
											"                        header: {\r",
											"                            'Content-Type': 'application/json'\r",
											"                        }\r",
											"                    },\r",
											"                    (error, response) => {\r",
											"                        if (error || (response.code >= 400 && response.code <= 599)) {\r",
											"                            throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"                        }\r",
											"                        pm.collectionVariables.set('eid', response.json().id);\r",
											"                        let compilation = {\r",
											"                            \"events\": [response.json().id],\r",
											"                            \"pinned\": true,\r",
											"                            \"title\": 'title' + counter\r",
											"                        };\r",
											"                        pm.sendRequest({\r",
											"                                url: pm.collectionVariables.get(\"baseUrl\") + '/admin/compilations',\r",
											"                                method: 'POST',\r",
											"                                body: JSON.stringify(compilation),\r",
											"                                header: {\r",
											"                                    'Content-Type': 'application/json'\r",
											"                                }\r",
											"                            },\r",
											"                            (error, response) => {\r",
											"                                if (error || (response.code >= 400 && response.code <= 599)) {\r",
											"                                    throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"                                }\r",
											"\r",
											"                                pm.collectionVariables.set('compid', response.json().id);\r",
											"                            });\r",
											"                    });\r",
											"            });\r",
											"    });\r",
											"\r",
											"pm.collectionVariables.set(\"usersCount\", pm.collectionVariables.get(\"usersCount\") + 1);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/compilations/:compId/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"compilations",
										":compId",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "compId",
											"value": "{{compid}}",
											"description": "(Required) id подборки"
										},
										{
											"key": "eventId",
											"value": "{{eid}}",
											"description": "(Required) id события"
										}
									]
								}
							},
							"response": [
								{
									"name": "Событие удалено из подборки",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/admin/compilations/:compId/events/:eventId",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"compilations",
												":compId",
												"events",
												":eventId"
											],
											"variable": [
												{
													"key": "compId",
													"value": "32652613",
													"description": "(Required) id подборки"
												},
												{
													"key": "eventId",
													"value": "32652613",
													"description": "(Required) id события"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Запрос составлен с ошибкой",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/compilations/:compId/events/:eventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations",
												":compId",
												"events",
												":eventId"
											],
											"variable": [
												{
													"key": "compId",
													"value": "32652613",
													"description": "(Required) id подборки"
												},
												{
													"key": "eventId",
													"value": "32652613",
													"description": "(Required) id события"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Не выполнены условия для совершения операции",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/compilations/:compId/events/:eventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations",
												":compId",
												"events",
												":eventId"
											],
											"variable": [
												{
													"key": "compId",
													"value": "32652613",
													"description": "(Required) id подборки"
												},
												{
													"key": "eventId",
													"value": "32652613",
													"description": "(Required) id события"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Объект не найден",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/compilations/:compId/events/:eventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations",
												":compId",
												"events",
												":eventId"
											],
											"variable": [
												{
													"key": "compId",
													"value": "32652613",
													"description": "(Required) id подборки"
												},
												{
													"key": "eventId",
													"value": "32652613",
													"description": "(Required) id события"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"NOT_FOUND\",\n  \"reason\": \"The required object was not found.\",\n  \"message\": \"Event with id=21 was not found.\",\n  \"timestamp\": \"2022-09-07 09:10:50\"\n}"
								},
								{
									"name": "Запрос приводит к нарушению целостности данных",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/compilations/:compId/events/:eventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations",
												":compId",
												"events",
												":eventId"
											],
											"variable": [
												{
													"key": "compId",
													"value": "32652613",
													"description": "(Required) id подборки"
												},
												{
													"key": "eventId",
													"value": "32652613",
													"description": "(Required) id события"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"CONFLICT\",\n  \"reason\": \"Integrity constraint has been violated\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:47:58\"\n}"
								},
								{
									"name": "Внутренняя ошибка сервера",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/compilations/:compId/events/:eventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations",
												":compId",
												"events",
												":eventId"
											],
											"variable": [
												{
													"key": "compId",
													"value": "32652613",
													"description": "(Required) id подборки"
												},
												{
													"key": "eventId",
													"value": "32652613",
													"description": "(Required) id события"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"INTERNAL_SERVER_ERROR\",\n  \"reason\": \"Error occurred\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:23:27\"\n}"
								}
							]
						},
						{
							"name": "Добавить событие в подборку",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var body = {};\r",
											"let title = 'title' + pm.collectionVariables.get(\"usersCount\");\r",
											"let mail = 'email' + pm.collectionVariables.get(\"usersCount\") + '@yandex.ru';\r",
											"pm.collectionVariables.set(\"usersCount\", pm.collectionVariables.get(\"usersCount\") + 1)\r",
											"pm.collectionVariables.set('mail', mail)\r",
											"body = {\r",
											"    'email': mail,\r",
											"    'name': 'Usver'\r",
											"};\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"baseUrl\") + '/admin/users',\r",
											"    method: 'POST',\r",
											"    body: JSON.stringify(body),\r",
											"    header: {'Content-Type': 'application/json'}\r",
											"}, \r",
											"(error, response) => {\r",
											"    if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"        throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"    }\r",
											"    pm.collectionVariables.set('response', response.json())\r",
											"    pm.collectionVariables.set('uid', response.json().id)\r",
											"    var body = {};\r",
											"    let name = 'name' + pm.collectionVariables.get(\"usersCount\");\r",
											"    pm.collectionVariables.set('name', response.json().name)\r",
											"    pm.collectionVariables.set(\"usersCount\", pm.collectionVariables.get(\"usersCount\") + 1)\r",
											"    body = {\r",
											"        'name': name\r",
											"    };\r",
											"    pm.sendRequest({\r",
											"        url: pm.collectionVariables.get(\"baseUrl\") + '/admin/categories',\r",
											"        method: 'POST',\r",
											"        body: JSON.stringify(body),\r",
											"        header: {'Content-Type': 'application/json'}\r",
											"    }, \r",
											"    (error, response) => {\r",
											"        if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"            throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"        }\r",
											"        pm.collectionVariables.set('catid', response.json().id);\r",
											"        pm.collectionVariables.set('catname', response.json().name)\r",
											"        body = {\r",
											"            annotation: \"annotation169119129619612961691616161651651\",\r",
											"            category: pm.collectionVariables.get(\"catid\"),\r",
											"            description: \"description9498465165165161616516516516516\",\r",
											"            eventDate: \"2095-09-06 13:30:38\",\r",
											"            location: {\r",
											"                lat: 10,\r",
											"                lon: 580,\r",
											"            },\r",
											"            paid: true,\r",
											"            participantLimit: 0,\r",
											"            requestModeration: true,\r",
											"            title: \"title\",\r",
											"        };\r",
											"        pm.sendRequest({\r",
											"            url: pm.collectionVariables.get(\"baseUrl\") + '/users/' + pm.collectionVariables.get('uid') + '/events',\r",
											"            method: 'POST',\r",
											"            body: JSON.stringify(body),\r",
											"            header: {'Content-Type': 'application/json'}\r",
											"        }, \r",
											"        (error, response) => {\r",
											"            if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"                throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"            }\r",
											"            pm.collectionVariables.set('eid', response.json().id);\r",
											"            body = {\r",
											"                \"events\": [],\r",
											"                \"pinned\": true,\r",
											"                \"title\": title\r",
											"            };\r",
											"            pm.sendRequest({\r",
											"            url: pm.collectionVariables.get(\"baseUrl\") + '/admin/compilations',\r",
											"            method: 'POST',\r",
											"            body: JSON.stringify(body),\r",
											"            header: {'Content-Type': 'application/json'}\r",
											"            }, (error, response) => {\r",
											"                if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"                    throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"                }\r",
											"                pm.collectionVariables.set('compid', response.json().id);\r",
											"\r",
											"            });\r",
											"        });\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/compilations/:compId/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"compilations",
										":compId",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "compId",
											"value": "{{compid}}",
											"description": "(Required) id подборки"
										},
										{
											"key": "eventId",
											"value": "{{eid}}",
											"description": "(Required) id события"
										}
									]
								}
							},
							"response": [
								{
									"name": "Событие добавлено",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/admin/compilations/:compId/events/:eventId",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"compilations",
												":compId",
												"events",
												":eventId"
											],
											"variable": [
												{
													"key": "compId",
													"value": "32652613",
													"description": "(Required) id подборки"
												},
												{
													"key": "eventId",
													"value": "32652613",
													"description": "(Required) id события"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Запрос составлен с ошибкой",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/compilations/:compId/events/:eventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations",
												":compId",
												"events",
												":eventId"
											],
											"variable": [
												{
													"key": "compId",
													"value": "32652613",
													"description": "(Required) id подборки"
												},
												{
													"key": "eventId",
													"value": "32652613",
													"description": "(Required) id события"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Не выполнены условия для совершения операции",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/compilations/:compId/events/:eventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations",
												":compId",
												"events",
												":eventId"
											],
											"variable": [
												{
													"key": "compId",
													"value": "32652613",
													"description": "(Required) id подборки"
												},
												{
													"key": "eventId",
													"value": "32652613",
													"description": "(Required) id события"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Объект не найден",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/compilations/:compId/events/:eventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations",
												":compId",
												"events",
												":eventId"
											],
											"variable": [
												{
													"key": "compId",
													"value": "32652613",
													"description": "(Required) id подборки"
												},
												{
													"key": "eventId",
													"value": "32652613",
													"description": "(Required) id события"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"NOT_FOUND\",\n  \"reason\": \"The required object was not found.\",\n  \"message\": \"Event with id=21 was not found.\",\n  \"timestamp\": \"2022-09-07 09:10:50\"\n}"
								},
								{
									"name": "Запрос приводит к нарушению целостности данных",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/compilations/:compId/events/:eventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations",
												":compId",
												"events",
												":eventId"
											],
											"variable": [
												{
													"key": "compId",
													"value": "32652613",
													"description": "(Required) id подборки"
												},
												{
													"key": "eventId",
													"value": "32652613",
													"description": "(Required) id события"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"CONFLICT\",\n  \"reason\": \"Integrity constraint has been violated\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:47:58\"\n}"
								},
								{
									"name": "Внутренняя ошибка сервера",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/compilations/:compId/events/:eventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations",
												":compId",
												"events",
												":eventId"
											],
											"variable": [
												{
													"key": "compId",
													"value": "32652613",
													"description": "(Required) id подборки"
												},
												{
													"key": "eventId",
													"value": "32652613",
													"description": "(Required) id события"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"INTERNAL_SERVER_ERROR\",\n  \"reason\": \"Error occurred\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:23:27\"\n}"
								}
							]
						},
						{
							"name": "Открепить подборку на главной странице",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var body = {};\r",
											"let title = 'title' + pm.collectionVariables.get(\"usersCount\");\r",
											"let mail = 'email' + pm.collectionVariables.get(\"usersCount\") + '@yandex.ru';\r",
											"pm.collectionVariables.set(\"usersCount\", pm.collectionVariables.get(\"usersCount\") + 1)\r",
											"pm.collectionVariables.set('mail', mail)\r",
											"body = {\r",
											"    'email': mail,\r",
											"    'name': 'Usver'\r",
											"};\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"baseUrl\") + '/admin/users',\r",
											"    method: 'POST',\r",
											"    body: JSON.stringify(body),\r",
											"    header: {'Content-Type': 'application/json'}\r",
											"}, \r",
											"(error, response) => {\r",
											"    if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"        throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"    }\r",
											"    pm.collectionVariables.set('response', response.json())\r",
											"    pm.collectionVariables.set('uid', response.json().id)\r",
											"    var body = {};\r",
											"    let name = 'name' + pm.collectionVariables.get(\"usersCount\");\r",
											"    pm.collectionVariables.set('name', response.json().name)\r",
											"    pm.collectionVariables.set(\"usersCount\", pm.collectionVariables.get(\"usersCount\") + 1)\r",
											"    body = {\r",
											"        'name': name\r",
											"    };\r",
											"    pm.sendRequest({\r",
											"        url: pm.collectionVariables.get(\"baseUrl\") + '/admin/categories',\r",
											"        method: 'POST',\r",
											"        body: JSON.stringify(body),\r",
											"        header: {'Content-Type': 'application/json'}\r",
											"    }, \r",
											"    (error, response) => {\r",
											"        if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"            throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"        }\r",
											"        pm.collectionVariables.set('catid', response.json().id);\r",
											"        pm.collectionVariables.set('catname', response.json().name)\r",
											"        body = {\r",
											"            annotation: \"annotation169119129619612961691616161651651\",\r",
											"            category: pm.collectionVariables.get(\"catid\"),\r",
											"            description: \"description9498465165165161616516516516516\",\r",
											"            eventDate: \"2095-09-06 13:30:38\",\r",
											"            location: {\r",
											"                lat: 10,\r",
											"                lon: 580,\r",
											"            },\r",
											"            paid: true,\r",
											"            participantLimit: 0,\r",
											"            requestModeration: true,\r",
											"            title: \"title\",\r",
											"        };\r",
											"        pm.sendRequest({\r",
											"            url: pm.collectionVariables.get(\"baseUrl\") + '/users/' + pm.collectionVariables.get('uid') + '/events',\r",
											"            method: 'POST',\r",
											"            body: JSON.stringify(body),\r",
											"            header: {'Content-Type': 'application/json'}\r",
											"        }, \r",
											"        (error, response) => {\r",
											"            if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"                throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"            }\r",
											"            pm.collectionVariables.set('eid', response.json().id);\r",
											"            body = {\r",
											"                \"events\": [],\r",
											"                \"pinned\": true,\r",
											"                \"title\": title\r",
											"            };\r",
											"            pm.sendRequest({\r",
											"                url: pm.collectionVariables.get(\"baseUrl\") + '/admin/compilations',\r",
											"                method: 'POST',\r",
											"                body: JSON.stringify(body),\r",
											"                header: {'Content-Type': 'application/json'}\r",
											"            }, \r",
											"            (error, response) => {\r",
											"                if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"                    throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"                }\r",
											"                pm.collectionVariables.set('compid', response.json().id);\r",
											"            });\r",
											"        });\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/compilations/:compId/pin",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"compilations",
										":compId",
										"pin"
									],
									"variable": [
										{
											"key": "compId",
											"value": "{{compid}}",
											"description": "(Required) id подборки"
										}
									]
								}
							},
							"response": [
								{
									"name": "Подборка откреплена",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/admin/compilations/:compId/pin",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"compilations",
												":compId",
												"pin"
											],
											"variable": [
												{
													"key": "compId",
													"value": "32652613",
													"description": "(Required) id подборки"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Запрос составлен с ошибкой",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/compilations/:compId/pin",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations",
												":compId",
												"pin"
											],
											"variable": [
												{
													"key": "compId",
													"value": "32652613",
													"description": "(Required) id подборки"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Не выполнены условия для совершения операции",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/compilations/:compId/pin",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations",
												":compId",
												"pin"
											],
											"variable": [
												{
													"key": "compId",
													"value": "32652613",
													"description": "(Required) id подборки"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Объект не найден",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/compilations/:compId/pin",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations",
												":compId",
												"pin"
											],
											"variable": [
												{
													"key": "compId",
													"value": "32652613",
													"description": "(Required) id подборки"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"NOT_FOUND\",\n  \"reason\": \"The required object was not found.\",\n  \"message\": \"Event with id=21 was not found.\",\n  \"timestamp\": \"2022-09-07 09:10:50\"\n}"
								},
								{
									"name": "Запрос приводит к нарушению целостности данных",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/compilations/:compId/pin",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations",
												":compId",
												"pin"
											],
											"variable": [
												{
													"key": "compId",
													"value": "32652613",
													"description": "(Required) id подборки"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"CONFLICT\",\n  \"reason\": \"Integrity constraint has been violated\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:47:58\"\n}"
								},
								{
									"name": "Внутренняя ошибка сервера",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/compilations/:compId/pin",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations",
												":compId",
												"pin"
											],
											"variable": [
												{
													"key": "compId",
													"value": "32652613",
													"description": "(Required) id подборки"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"INTERNAL_SERVER_ERROR\",\n  \"reason\": \"Error occurred\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:23:27\"\n}"
								}
							]
						},
						{
							"name": "Закрепить подборку на главной странице",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var body = {};\r",
											"let title = 'title' + pm.collectionVariables.get(\"usersCount\");\r",
											"let mail = 'email' + pm.collectionVariables.get(\"usersCount\") + '@yandex.ru';\r",
											"pm.collectionVariables.set(\"usersCount\", pm.collectionVariables.get(\"usersCount\") + 1)\r",
											"pm.collectionVariables.set('mail', mail)\r",
											"body = {\r",
											"    'email': mail,\r",
											"    'name': 'Usver'\r",
											"};\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"baseUrl\") + '/admin/users',\r",
											"    method: 'POST',\r",
											"    body: JSON.stringify(body),\r",
											"    header: {'Content-Type': 'application/json'}\r",
											"    }, (error, response) => {\r",
											"        if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"            throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"        }\r",
											"        pm.collectionVariables.set('response', response.json())\r",
											"        pm.collectionVariables.set('uid', response.json().id)\r",
											"        var body = {};\r",
											"        let name = 'name' + pm.collectionVariables.get(\"usersCount\");\r",
											"        pm.collectionVariables.set('name', response.json().name)\r",
											"        pm.collectionVariables.set(\"usersCount\", pm.collectionVariables.get(\"usersCount\") + 1)\r",
											"        body = {\r",
											"            'name': name\r",
											"        };\r",
											"        pm.sendRequest({\r",
											"            url: pm.collectionVariables.get(\"baseUrl\") + '/admin/categories',\r",
											"            method: 'POST',\r",
											"            body: JSON.stringify(body),\r",
											"            header: {'Content-Type': 'application/json'}\r",
											"            }, (error, response) => {\r",
											"                if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"                    throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"                }\r",
											"                pm.collectionVariables.set('catid', response.json().id);\r",
											"                pm.collectionVariables.set('catname', response.json().name)\r",
											"                body = {\r",
											"                    annotation: \"annotation169119129619612961691616161651651\",\r",
											"                    category: pm.collectionVariables.get(\"catid\"),\r",
											"                    description: \"description9498465165165161616516516516516\",\r",
											"                    eventDate: \"2095-09-06 13:30:38\",\r",
											"                    location: {\r",
											"                        lat: 10,\r",
											"                        lon: 580,\r",
											"                    },\r",
											"                    paid: true,\r",
											"                    participantLimit: 0,\r",
											"                    requestModeration: true,\r",
											"                    title: \"title\",\r",
											"                };\r",
											"                pm.sendRequest({\r",
											"                    url: pm.collectionVariables.get(\"baseUrl\") + '/users/' + pm.collectionVariables.get('uid') + '/events',\r",
											"                    method: 'POST',\r",
											"                    body: JSON.stringify(body),\r",
											"                    header: {'Content-Type': 'application/json'}\r",
											"                    }, (error, response) => {\r",
											"                        if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"                            throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"                        }\r",
											"                        pm.collectionVariables.set('eid', response.json().id);\r",
											"                        body = {\r",
											"                            \"events\": [],\r",
											"                            \"pinned\": false,\r",
											"                            \"title\": title\r",
											"                        };\r",
											"                        pm.sendRequest({\r",
											"                        url: pm.collectionVariables.get(\"baseUrl\") + '/admin/compilations',\r",
											"                        method: 'POST',\r",
											"                        body: JSON.stringify(body),\r",
											"                        header: {'Content-Type': 'application/json'}\r",
											"                        }, (error, response) => {\r",
											"                            if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"                                throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"                            }\r",
											"                            pm.collectionVariables.set('compid', response.json().id);\r",
											"\r",
											"                        });\r",
											"                });\r",
											"        });\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/compilations/:compId/pin",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"compilations",
										":compId",
										"pin"
									],
									"variable": [
										{
											"key": "compId",
											"value": "{{compid}}",
											"description": "(Required) id подборки"
										}
									]
								}
							},
							"response": [
								{
									"name": "Подборка закреплена",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/admin/compilations/:compId/pin",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"compilations",
												":compId",
												"pin"
											],
											"variable": [
												{
													"key": "compId",
													"value": "32652613",
													"description": "(Required) id подборки"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Запрос составлен с ошибкой",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/compilations/:compId/pin",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations",
												":compId",
												"pin"
											],
											"variable": [
												{
													"key": "compId",
													"value": "32652613",
													"description": "(Required) id подборки"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Не выполнены условия для совершения операции",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/compilations/:compId/pin",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations",
												":compId",
												"pin"
											],
											"variable": [
												{
													"key": "compId",
													"value": "32652613",
													"description": "(Required) id подборки"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Объект не найден",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/compilations/:compId/pin",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations",
												":compId",
												"pin"
											],
											"variable": [
												{
													"key": "compId",
													"value": "32652613",
													"description": "(Required) id подборки"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"NOT_FOUND\",\n  \"reason\": \"The required object was not found.\",\n  \"message\": \"Event with id=21 was not found.\",\n  \"timestamp\": \"2022-09-07 09:10:50\"\n}"
								},
								{
									"name": "Запрос приводит к нарушению целостности данных",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/compilations/:compId/pin",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations",
												":compId",
												"pin"
											],
											"variable": [
												{
													"key": "compId",
													"value": "32652613",
													"description": "(Required) id подборки"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"CONFLICT\",\n  \"reason\": \"Integrity constraint has been violated\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:47:58\"\n}"
								},
								{
									"name": "Внутренняя ошибка сервера",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/compilations/:compId/pin",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations",
												":compId",
												"pin"
											],
											"variable": [
												{
													"key": "compId",
													"value": "32652613",
													"description": "(Required) id подборки"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"INTERNAL_SERVER_ERROR\",\n  \"reason\": \"Error occurred\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:23:27\"\n}"
								}
							]
						},
						{
							"name": "Удаление подборки",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var body = {};\r",
											"let title = \"title\" + pm.collectionVariables.get(\"usersCount\");\r",
											"pm.collectionVariables.set(\r",
											"  \"usersCount\",\r",
											"  pm.collectionVariables.get(\"usersCount\") + 1\r",
											");\r",
											"let mail = \"email\" + pm.collectionVariables.get(\"usersCount\") + \"@gmail.com\";\r",
											"pm.collectionVariables.set(\"mail\", mail);\r",
											"pm.collectionVariables.set(\r",
											"  \"usersCount\",\r",
											"  pm.collectionVariables.get(\"usersCount\") + 1\r",
											");\r",
											"body = {\r",
											"  email: mail,\r",
											"  name: \"Usver\",\r",
											"};\r",
											"pm.sendRequest(\r",
											"  {\r",
											"    url: pm.collectionVariables.get(\"baseUrl\") + \"/admin/users\",\r",
											"    method: \"POST\",\r",
											"    body: JSON.stringify(body),\r",
											"    header: { \"Content-Type\": \"application/json\" },\r",
											"  },\r",
											"  (error, response) => {\r",
											"    if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"        throw new Error(\"Ошибка подготовки тестовых данных. Пользователь не создан: \" + error);\r",
											"    }\r",
											"    pm.collectionVariables.set(\"response\", response.json());\r",
											"    pm.collectionVariables.set(\"uid\", response.json().id);\r",
											"    var body = {};\r",
											"    let name = \"name\" + pm.collectionVariables.get(\"usersCount\");\r",
											"    pm.collectionVariables.set(\"name\", name);\r",
											"    pm.collectionVariables.set(\r",
											"      \"usersCount\",\r",
											"      pm.collectionVariables.get(\"usersCount\") + 1\r",
											"    );\r",
											"    body = {\r",
											"      name: name,\r",
											"    };\r",
											"    pm.sendRequest(\r",
											"      {\r",
											"        url: pm.collectionVariables.get(\"baseUrl\") + \"/admin/categories\",\r",
											"        method: \"POST\",\r",
											"        body: JSON.stringify(body),\r",
											"        header: { \"Content-Type\": \"application/json\" },\r",
											"      },\r",
											"      (error, response) => {\r",
											"        if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"            throw new Error(\"Ошибка подготовки тестовых данных. Категория не создана: \" + error);\r",
											"        }\r",
											"        pm.collectionVariables.set(\"catid\", response.json().id);\r",
											"        pm.collectionVariables.set(\"catname\", response.json().name);\r",
											"        body = {\r",
											"          annotation: \"annotatiron 6161616516161898798516541651468549684\",\r",
											"          category: parseInt(pm.collectionVariables.get(\"catid\")),\r",
											"          description: \"descriptrion 6161616516161898798516541651468549684\",\r",
											"          eventDate: \"2035-02-10 17:17:42\",\r",
											"          location: {\r",
											"            lat: 10,\r",
											"            lon: 580,\r",
											"          },\r",
											"          paid: true,\r",
											"          participantLimit: 10,\r",
											"          requestModeration: true,\r",
											"          title: \"title\",\r",
											"        };\r",
											"        pm.sendRequest(\r",
											"          {\r",
											"            url:\r",
											"              pm.collectionVariables.get(\"baseUrl\") +\r",
											"              \"/users/\" +\r",
											"              pm.collectionVariables.get(\"uid\") +\r",
											"              \"/events\",\r",
											"            method: \"POST\",\r",
											"            body: JSON.stringify(body),\r",
											"            header: { \"Content-Type\": \"application/json\" },\r",
											"          },\r",
											"          (error, response) => {\r",
											"            if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"                throw new Error(\"Ошибка подготовки тестовых данных. Событие не создано: \" + error);\r",
											"            }\r",
											"            pm.collectionVariables.set(\"response\", response.json());\r",
											"            body = {\r",
											"              events: [pm.collectionVariables.get(\"eid\")],\r",
											"              pinned: true,\r",
											"              title: title,\r",
											"            };\r",
											"            pm.collectionVariables.set(\"request_body\", JSON.stringify(body));\r",
											"            pm.collectionVariables.set(\"toCheck\", body);\r",
											"            pm.sendRequest(\r",
											"              {\r",
											"                url:\r",
											"                  pm.collectionVariables.get(\"baseUrl\") +\r",
											"                  \"/admin/compilations\",\r",
											"                method: \"POST\",\r",
											"                body: JSON.stringify(body),\r",
											"                header: { \"Content-Type\": \"application/json\" },\r",
											"              },\r",
											"              (error, response) => {\r",
											"                pm.collectionVariables.set(\"response\", response.json());\r",
											"                pm.collectionVariables.set(\"compid\", response.json().id)\r",
											"                pm.collectionVariables.set(\"toCheck\", body);\r",
											"              }\r",
											"            );\r",
											"          }\r",
											"        );\r",
											"      }\r",
											"    );\r",
											"  }\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/compilations/:compId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"compilations",
										":compId"
									],
									"variable": [
										{
											"key": "compId",
											"value": "{{compid}}",
											"description": "(Required) id подборки"
										}
									]
								}
							},
							"response": [
								{
									"name": "Подборка удалена",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/admin/compilations/:compId",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"compilations",
												":compId"
											],
											"variable": [
												{
													"key": "compId",
													"value": "32652613",
													"description": "(Required) id подборки"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Запрос составлен с ошибкой",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/compilations/:compId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations",
												":compId"
											],
											"variable": [
												{
													"key": "compId",
													"value": "32652613",
													"description": "(Required) id подборки"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Не выполнены условия для совершения операции",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/compilations/:compId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations",
												":compId"
											],
											"variable": [
												{
													"key": "compId",
													"value": "32652613",
													"description": "(Required) id подборки"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Объект не найден",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/compilations/:compId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations",
												":compId"
											],
											"variable": [
												{
													"key": "compId",
													"value": "32652613",
													"description": "(Required) id подборки"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"NOT_FOUND\",\n  \"reason\": \"The required object was not found.\",\n  \"message\": \"Event with id=21 was not found.\",\n  \"timestamp\": \"2022-09-07 09:10:50\"\n}"
								},
								{
									"name": "Запрос приводит к нарушению целостности данных",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/compilations/:compId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations",
												":compId"
											],
											"variable": [
												{
													"key": "compId",
													"value": "32652613",
													"description": "(Required) id подборки"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"CONFLICT\",\n  \"reason\": \"Integrity constraint has been violated\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:47:58\"\n}"
								},
								{
									"name": "Внутренняя ошибка сервера",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/compilations/:compId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"compilations",
												":compId"
											],
											"variable": [
												{
													"key": "compId",
													"value": "32652613",
													"description": "(Required) id подборки"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"INTERNAL_SERVER_ERROR\",\n  \"reason\": \"Error occurred\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:23:27\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "events",
					"item": [
						{
							"name": "Поиск событий",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.request.removeQueryParams(['users', 'categories']);\r",
											"        pm.request.addQueryParams([`users=` + user.id, 'categories=' + category.id]);\r",
											"        pm.collectionVariables.set('response', event);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");\r",
											"\r"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test event\", function () {\r",
											"    var jsonData = pm.response.json()[0];\r",
											"    var toCheck = pm.collectionVariables.get('response');\r",
											"    pm.expect(jsonData.id).to.eql(toCheck.id);\r",
											"    pm.expect(jsonData.title).to.eql(toCheck.title);\r",
											"    pm.expect(jsonData.annotation).to.eql(toCheck.annotation);\r",
											"    pm.expect(jsonData.eventDate).to.eql(toCheck.eventDate);\r",
											"    pm.expect(jsonData.category.id).to.eql(toCheck.category.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/events?users={{uid}}&states=PUBLISHED&categories={{catid}}&rangeStart=2022-01-06%2013%3A30%3A38&rangeEnd=2097-09-06%2013%3A30%3A38&from=0&size=1000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"events"
									],
									"query": [
										{
											"key": "users",
											"value": "{{uid}}",
											"description": "список id пользователей, чьи события нужно найти"
										},
										{
											"key": "states",
											"value": "PUBLISHED",
											"description": "список состояний в которых находятся искомые события"
										},
										{
											"key": "categories",
											"value": "{{catid}}",
											"description": "список id категорий в которых будет вестись поиск"
										},
										{
											"key": "rangeStart",
											"value": "2022-01-06%2013%3A30%3A38",
											"description": "дата и время не раньше которых должно произойти событие"
										},
										{
											"key": "rangeEnd",
											"value": "2097-09-06%2013%3A30%3A38",
											"description": "дата и время не позже которых должно произойти событие"
										},
										{
											"key": "from",
											"value": "0",
											"description": "количество событий, которые нужно пропустить для формирования текущего набора"
										},
										{
											"key": "size",
											"value": "1000",
											"description": "количество событий в наборе"
										}
									]
								},
								"description": "Эндпоинт возвращает полную информацию обо всех событиях подходящих под переданные условия"
							},
							"response": [
								{
									"name": "События найдены",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/events?users=-70289167&users=20327827&states=fugiat minim dolore laboris&states=labore irure sit&categories=-70289167&categories=20327827&rangeStart=aliquip veniam do&rangeEnd=aliquip veniam do&from=0&size=10",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"events"
											],
											"query": [
												{
													"key": "users",
													"value": "-70289167"
												},
												{
													"key": "users",
													"value": "20327827"
												},
												{
													"key": "states",
													"value": "fugiat minim dolore laboris"
												},
												{
													"key": "states",
													"value": "labore irure sit"
												},
												{
													"key": "categories",
													"value": "-70289167"
												},
												{
													"key": "categories",
													"value": "20327827"
												},
												{
													"key": "rangeStart",
													"value": "aliquip veniam do"
												},
												{
													"key": "rangeEnd",
													"value": "aliquip veniam do"
												},
												{
													"key": "from",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"annotation\": \"Эксклюзивность нашего шоу гарантирует привлечение максимальной зрительской аудитории\",\n    \"category\": {\n      \"name\": \"Концерты\",\n      \"id\": 1\n    },\n    \"initiator\": {\n      \"id\": 3,\n      \"name\": \"Фёдоров Матвей\"\n    },\n    \"location\": {\n      \"lat\": 55.754167,\n      \"lon\": 37.62\n    },\n    \"title\": \"Знаменитое шоу \\\"Летающая кукуруза\\\"\",\n    \"confirmedRequests\": 5,\n    \"createdOn\": \"yyyy-MM-dd HH:mm:ss\",\n    \"description\": \"Что получится, если соединить кукурузу и полёт? Создатели \\\"Шоу летающей кукурузы\\\" испытали эту идею на практике и воплотили в жизнь инновационный проект, предлагающий свежий взгляд на развлечения...\",\n    \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n    \"id\": 1,\n    \"paid\": true,\n    \"participantLimit\": 10,\n    \"publishedOn\": \"yyyy-MM-dd HH:mm:ss\",\n    \"requestModeration\": true,\n    \"state\": \"PUBLISHED\",\n    \"views\": 999\n  },\n  {\n    \"annotation\": \"Эксклюзивность нашего шоу гарантирует привлечение максимальной зрительской аудитории\",\n    \"category\": {\n      \"name\": \"Концерты\",\n      \"id\": 1\n    },\n    \"initiator\": {\n      \"id\": 3,\n      \"name\": \"Фёдоров Матвей\"\n    },\n    \"location\": {\n      \"lat\": 55.754167,\n      \"lon\": 37.62\n    },\n    \"title\": \"Знаменитое шоу \\\"Летающая кукуруза\\\"\",\n    \"confirmedRequests\": 5,\n    \"createdOn\": \"yyyy-MM-dd HH:mm:ss\",\n    \"description\": \"Что получится, если соединить кукурузу и полёт? Создатели \\\"Шоу летающей кукурузы\\\" испытали эту идею на практике и воплотили в жизнь инновационный проект, предлагающий свежий взгляд на развлечения...\",\n    \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n    \"id\": 1,\n    \"paid\": true,\n    \"participantLimit\": 10,\n    \"publishedOn\": \"yyyy-MM-dd HH:mm:ss\",\n    \"requestModeration\": true,\n    \"state\": \"PUBLISHED\",\n    \"views\": 999\n  }\n]"
								},
								{
									"name": "Запрос составлен с ошибкой",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/events?users=-70289167&users=20327827&states=fugiat minim dolore laboris&states=labore irure sit&categories=-70289167&categories=20327827&rangeStart=aliquip veniam do&rangeEnd=aliquip veniam do&from=0&size=10",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"events"
											],
											"query": [
												{
													"key": "users",
													"value": "-70289167"
												},
												{
													"key": "users",
													"value": "20327827"
												},
												{
													"key": "states",
													"value": "fugiat minim dolore laboris"
												},
												{
													"key": "states",
													"value": "labore irure sit"
												},
												{
													"key": "categories",
													"value": "-70289167"
												},
												{
													"key": "categories",
													"value": "20327827"
												},
												{
													"key": "rangeStart",
													"value": "aliquip veniam do"
												},
												{
													"key": "rangeEnd",
													"value": "aliquip veniam do"
												},
												{
													"key": "from",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Не выполнены условия для совершения операции",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/events?users=-70289167&users=20327827&states=fugiat minim dolore laboris&states=labore irure sit&categories=-70289167&categories=20327827&rangeStart=aliquip veniam do&rangeEnd=aliquip veniam do&from=0&size=10",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"events"
											],
											"query": [
												{
													"key": "users",
													"value": "-70289167"
												},
												{
													"key": "users",
													"value": "20327827"
												},
												{
													"key": "states",
													"value": "fugiat minim dolore laboris"
												},
												{
													"key": "states",
													"value": "labore irure sit"
												},
												{
													"key": "categories",
													"value": "-70289167"
												},
												{
													"key": "categories",
													"value": "20327827"
												},
												{
													"key": "rangeStart",
													"value": "aliquip veniam do"
												},
												{
													"key": "rangeEnd",
													"value": "aliquip veniam do"
												},
												{
													"key": "from",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Объект не найден",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/events?users=-70289167&users=20327827&states=fugiat minim dolore laboris&states=labore irure sit&categories=-70289167&categories=20327827&rangeStart=aliquip veniam do&rangeEnd=aliquip veniam do&from=0&size=10",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"events"
											],
											"query": [
												{
													"key": "users",
													"value": "-70289167"
												},
												{
													"key": "users",
													"value": "20327827"
												},
												{
													"key": "states",
													"value": "fugiat minim dolore laboris"
												},
												{
													"key": "states",
													"value": "labore irure sit"
												},
												{
													"key": "categories",
													"value": "-70289167"
												},
												{
													"key": "categories",
													"value": "20327827"
												},
												{
													"key": "rangeStart",
													"value": "aliquip veniam do"
												},
												{
													"key": "rangeEnd",
													"value": "aliquip veniam do"
												},
												{
													"key": "from",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"NOT_FOUND\",\n  \"reason\": \"The required object was not found.\",\n  \"message\": \"Event with id=21 was not found.\",\n  \"timestamp\": \"2022-09-07 09:10:50\"\n}"
								},
								{
									"name": "Запрос приводит к нарушению целостности данных",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/events?users=-70289167&users=20327827&states=fugiat minim dolore laboris&states=labore irure sit&categories=-70289167&categories=20327827&rangeStart=aliquip veniam do&rangeEnd=aliquip veniam do&from=0&size=10",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"events"
											],
											"query": [
												{
													"key": "users",
													"value": "-70289167"
												},
												{
													"key": "users",
													"value": "20327827"
												},
												{
													"key": "states",
													"value": "fugiat minim dolore laboris"
												},
												{
													"key": "states",
													"value": "labore irure sit"
												},
												{
													"key": "categories",
													"value": "-70289167"
												},
												{
													"key": "categories",
													"value": "20327827"
												},
												{
													"key": "rangeStart",
													"value": "aliquip veniam do"
												},
												{
													"key": "rangeEnd",
													"value": "aliquip veniam do"
												},
												{
													"key": "from",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"CONFLICT\",\n  \"reason\": \"Integrity constraint has been violated\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:47:58\"\n}"
								},
								{
									"name": "Внутренняя ошибка сервера",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/events?users=-70289167&users=20327827&states=fugiat minim dolore laboris&states=labore irure sit&categories=-70289167&categories=20327827&rangeStart=aliquip veniam do&rangeEnd=aliquip veniam do&from=0&size=10",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"events"
											],
											"query": [
												{
													"key": "users",
													"value": "-70289167"
												},
												{
													"key": "users",
													"value": "20327827"
												},
												{
													"key": "states",
													"value": "fugiat minim dolore laboris"
												},
												{
													"key": "states",
													"value": "labore irure sit"
												},
												{
													"key": "categories",
													"value": "-70289167"
												},
												{
													"key": "categories",
													"value": "20327827"
												},
												{
													"key": "rangeStart",
													"value": "aliquip veniam do"
												},
												{
													"key": "rangeEnd",
													"value": "aliquip veniam do"
												},
												{
													"key": "from",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"INTERNAL_SERVER_ERROR\",\n  \"reason\": \"Error occurred\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:23:27\"\n}"
								}
							]
						},
						{
							"name": "Редактирование события",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var body = {};\r",
											"let mail = \"email\" + pm.collectionVariables.get(\"usersCount\") + \"@gmail.com\";\r",
											"pm.collectionVariables.set(\"mail\", mail);\r",
											"pm.collectionVariables.set(\"usersCount\", pm.collectionVariables.get(\"usersCount\") + 1);\r",
											"body = {\r",
											"    email: mail,\r",
											"    name: \"Usver\",\r",
											"};\r",
											"\r",
											"pm.sendRequest(\r",
											"    {\r",
											"        url: pm.collectionVariables.get(\"baseUrl\") + \"/admin/users\",\r",
											"        method: \"POST\",\r",
											"        body: JSON.stringify(body),\r",
											"        header: { \"Content-Type\": \"application/json\" },\r",
											"    },\r",
											"    (error, response) => {\r",
											"        if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"            throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"        }\r",
											"        pm.collectionVariables.set(\"response\", response.json());\r",
											"        pm.collectionVariables.set(\"uid\", response.json().id);\r",
											"        var body = {};\r",
											"        let name = \"name\" + pm.collectionVariables.get(\"usersCount\");\r",
											"        pm.collectionVariables.set(\"name\", name);\r",
											"        pm.collectionVariables.set(\"usersCount\", pm.collectionVariables.get(\"usersCount\") + 1);\r",
											"        body = {\r",
											"            name: name,\r",
											"        };\r",
											"        pm.sendRequest(\r",
											"            {\r",
											"                url:\r",
											"                    pm.collectionVariables.get(\"baseUrl\") + \"/admin/categories\",\r",
											"                method: \"POST\",\r",
											"                body: JSON.stringify(body),\r",
											"                header: { \"Content-Type\": \"application/json\" },\r",
											"            },\r",
											"            (error, response) => {\r",
											"                if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"                    throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"                }\r",
											"                pm.collectionVariables.set(\"catid\", response.json().id);\r",
											"                pm.collectionVariables.set(\"catname\", response.json().name);\r",
											"                body = {\r",
											"                    annotation: \"annotation169119129619612961691616161651651\",\r",
											"                    category: pm.collectionVariables.get(\"catid\"),\r",
											"                    description: \"description9498465165165161616516516516516\",\r",
											"                    eventDate: \"2095-09-06 13:30:38\",\r",
											"                    location: {\r",
											"                        lat: 10,\r",
											"                        lon: 580,\r",
											"                    },\r",
											"                    paid: true,\r",
											"                    participantLimit: 0,\r",
											"                    requestModeration: true,\r",
											"                    title: \"title\",\r",
											"                };\r",
											"                pm.sendRequest(\r",
											"                    {\r",
											"                        url:\r",
											"                            pm.collectionVariables.get(\"baseUrl\") +\r",
											"                            \"/users/\" +\r",
											"                            pm.collectionVariables.get(\"uid\") +\r",
											"                            \"/events\",\r",
											"                        method: \"POST\",\r",
											"                        body: JSON.stringify(body),\r",
											"                        header: { \"Content-Type\": \"application/json\" },\r",
											"                    },\r",
											"                    (error, response) => {\r",
											"                        if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"                            throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"                        }\r",
											"                        pm.collectionVariables.set(\"response\", response.json());\r",
											"                        pm.collectionVariables.set(\"eid\", response.json().id);\r",
											"                        pm.collectionVariables.set(\"response\", response.json());\r",
											"                        pm.collectionVariables.set(\"eid\", response.json().id);\r",
											"                        body = {\r",
											"                            annotation:\r",
											"                                \"Сап прогулки по рекам и каналам – это возможность увидеть Практикбург с другого ракурса\",\r",
											"                            category: pm.collectionVariables.get(\"catid\"),\r",
											"                            description:\r",
											"                                'От английского SUP - Stand Up Paddle — \"стоя на доске с веслом\", гавайская разновидность сёрфинга, в котором серфер, стоя на доске, катается на волнах и при этом гребет веслом, а не руками, как в классическом серфинге.',\r",
											"                            eventDate: \"2027-09-11 23:02:19\",\r",
											"                            eventId: pm.collectionVariables.get(\"eid\"),\r",
											"                            paid: true,\r",
											"                            participantLimit: 20,\r",
											"                            title: \"Сап прогулки по рекам и каналам\",\r",
											"                        };\r",
											"                        pm.collectionVariables.set(\"newDataToSet\", body);\r",
											"                        pm.collectionVariables.set(\r",
											"                            \"request_body\",\r",
											"                            JSON.stringify(body)\r",
											"                        );\r",
											"\r",
											"                    }\r",
											"                );\r",
											"            }\r",
											"        );\r",
											"    }\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test event\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var newDataToSet = pm.collectionVariables.get('newDataToSet')\r",
											"    pm.expect(jsonData.annotation).to.eql(newDataToSet.annotation);\r",
											"    pm.expect(jsonData.eventDate).to.eql(newDataToSet.eventDate);\r",
											"    pm.expect(jsonData.description).to.eql(newDataToSet.description);\r",
											"    pm.expect(jsonData.paid).to.eql(newDataToSet.paid);\r",
											"    pm.expect(jsonData.participantLimit).to.eql(newDataToSet.participantLimit);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eid}}",
											"description": "(Required) id события"
										}
									]
								},
								"description": "Редактирование данных любого события администратором. Валидация данных не требуется."
							},
							"response": [
								{
									"name": "Событие отредактировано",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"annotation\": \"Новое краткое описание\",\n  \"category\": 26004447,\n  \"description\": \"Новое полное описание\",\n  \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": false,\n  \"participantLimit\": 33,\n  \"requestModeration\": false,\n  \"title\": \"Новый заголовок\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/admin/events/:eventId",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"events",
												":eventId"
											],
											"variable": [
												{
													"key": "eventId",
													"value": "32652613",
													"description": "(Required) id события"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"annotation\": \"Эксклюзивность нашего шоу гарантирует привлечение максимальной зрительской аудитории\",\n  \"category\": {\n    \"name\": \"Концерты\",\n    \"id\": 1\n  },\n  \"initiator\": {\n    \"id\": 3,\n    \"name\": \"Фёдоров Матвей\"\n  },\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"title\": \"Знаменитое шоу \\\"Летающая кукуруза\\\"\",\n  \"confirmedRequests\": 5,\n  \"createdOn\": \"yyyy-MM-dd HH:mm:ss\",\n  \"description\": \"Что получится, если соединить кукурузу и полёт? Создатели \\\"Шоу летающей кукурузы\\\" испытали эту идею на практике и воплотили в жизнь инновационный проект, предлагающий свежий взгляд на развлечения...\",\n  \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n  \"id\": 1,\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"publishedOn\": \"yyyy-MM-dd HH:mm:ss\",\n  \"requestModeration\": true,\n  \"state\": \"PUBLISHED\",\n  \"views\": 999\n}"
								},
								{
									"name": "Запрос составлен с ошибкой",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"annotation\": \"Новое краткое описание\",\n  \"category\": 26004447,\n  \"description\": \"Новое полное описание\",\n  \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": false,\n  \"participantLimit\": 33,\n  \"requestModeration\": false,\n  \"title\": \"Новый заголовок\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/events/:eventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"events",
												":eventId"
											],
											"variable": [
												{
													"key": "eventId",
													"value": "32652613",
													"description": "(Required) id события"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Не выполнены условия для совершения операции",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"annotation\": \"Новое краткое описание\",\n  \"category\": 26004447,\n  \"description\": \"Новое полное описание\",\n  \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": false,\n  \"participantLimit\": 33,\n  \"requestModeration\": false,\n  \"title\": \"Новый заголовок\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/events/:eventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"events",
												":eventId"
											],
											"variable": [
												{
													"key": "eventId",
													"value": "32652613",
													"description": "(Required) id события"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Объект не найден",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"annotation\": \"Новое краткое описание\",\n  \"category\": 26004447,\n  \"description\": \"Новое полное описание\",\n  \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": false,\n  \"participantLimit\": 33,\n  \"requestModeration\": false,\n  \"title\": \"Новый заголовок\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/events/:eventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"events",
												":eventId"
											],
											"variable": [
												{
													"key": "eventId",
													"value": "32652613",
													"description": "(Required) id события"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"NOT_FOUND\",\n  \"reason\": \"The required object was not found.\",\n  \"message\": \"Event with id=21 was not found.\",\n  \"timestamp\": \"2022-09-07 09:10:50\"\n}"
								},
								{
									"name": "Запрос приводит к нарушению целостности данных",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"annotation\": \"Новое краткое описание\",\n  \"category\": 26004447,\n  \"description\": \"Новое полное описание\",\n  \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": false,\n  \"participantLimit\": 33,\n  \"requestModeration\": false,\n  \"title\": \"Новый заголовок\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/events/:eventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"events",
												":eventId"
											],
											"variable": [
												{
													"key": "eventId",
													"value": "32652613",
													"description": "(Required) id события"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"CONFLICT\",\n  \"reason\": \"Integrity constraint has been violated\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:47:58\"\n}"
								},
								{
									"name": "Внутренняя ошибка сервера",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"annotation\": \"Новое краткое описание\",\n  \"category\": 26004447,\n  \"description\": \"Новое полное описание\",\n  \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": false,\n  \"participantLimit\": 33,\n  \"requestModeration\": false,\n  \"title\": \"Новый заголовок\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/events/:eventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"events",
												":eventId"
											],
											"variable": [
												{
													"key": "eventId",
													"value": "32652613",
													"description": "(Required) id события"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"INTERNAL_SERVER_ERROR\",\n  \"reason\": \"Error occurred\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:23:27\"\n}"
								}
							]
						},
						{
							"name": "Публикация события",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var body = {};\r",
											"let mail = 'email' + pm.collectionVariables.get(\"usersCount\") + '@yandex.ru';\r",
											"pm.collectionVariables.set('mail', mail)\r",
											"pm.collectionVariables.set(\"usersCount\", 1 + pm.collectionVariables.get(\"usersCount\"))\r",
											"body = {\r",
											"    'email': mail,\r",
											"    'name': 'Usver'\r",
											"};\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"baseUrl\") + '/admin/users',\r",
											"    method: 'POST',\r",
											"    body: JSON.stringify(body),\r",
											"    header: {'Content-Type': 'application/json'}\r",
											"    }, (error, response) => {\r",
											"        if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"            throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"        }\r",
											"        pm.collectionVariables.set('response', response.json())\r",
											"        pm.collectionVariables.set('uid', parseInt(response.json().id))\r",
											"        var body = {};\r",
											"        let name = 'name' + pm.collectionVariables.get(\"usersCount\");\r",
											"        pm.collectionVariables.set('name', name)\r",
											"        pm.collectionVariables.set(\"usersCount\", 1 + pm.collectionVariables.get(\"usersCount\"))\r",
											"        body = {\r",
											"            'name': name\r",
											"        };\r",
											"        pm.sendRequest({\r",
											"            url: pm.collectionVariables.get(\"baseUrl\") + '/admin/categories',\r",
											"            method: 'POST',\r",
											"            body: JSON.stringify(body),\r",
											"            header: {'Content-Type': 'application/json'}\r",
											"            }, (error, response) => {\r",
											"                if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"                    throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"                }\r",
											"                pm.collectionVariables.set('catid', response.json().id);\r",
											"                pm.collectionVariables.set('catname', response.json().name)\r",
											"               \r",
											"                    body = {\r",
											"                        \"annotation\": \"annotation169119129619612961691616161651651\",\r",
											"                        \"category\": pm.collectionVariables.get('catid'),\r",
											"                        \"description\": \"description9498465165165161616516516516516\",\r",
											"                        \"eventDate\": \"2095-09-06 13:30:38\",\r",
											"                        \"location\": {\r",
											"                            \"lat\": 10,\r",
											"                            \"lon\": 580\r",
											"                        },\r",
											"                        \"paid\": true,\r",
											"                        \"participantLimit\": 0,\r",
											"                        \"requestModeration\": true,\r",
											"                        \"title\": \"title\"\r",
											"                    };\r",
											"                    pm.sendRequest({\r",
											"                        url: pm.collectionVariables.get(\"baseUrl\") + '/users/' + pm.collectionVariables.get('uid') + '/events',\r",
											"                        method: 'POST',\r",
											"                        body: JSON.stringify(body),\r",
											"                        header: {'Content-Type': 'application/json'}\r",
											"                    }, (error, response) => {\r",
											"                        if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"                            throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"                        }\r",
											"                        pm.collectionVariables.set('eid', response.json().id);\r",
											"                        pm.collectionVariables.set('response', body)\r",
											"                    });\r",
											"                });\r",
											"            });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test event\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.state).to.eql(\"PUBLISHED\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/events/:eventId/publish",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"events",
										":eventId",
										"publish"
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eid}}",
											"description": "(Required) id события"
										}
									]
								},
								"description": "Обратите внимание:\n - дата начала события должна быть не ранее чем за час от даты публикации.\n- событие должно быть в состоянии ожидания публикации"
							},
							"response": [
								{
									"name": "Событие опубликовано",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/events/:eventId/publish",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"events",
												":eventId",
												"publish"
											],
											"variable": [
												{
													"key": "eventId",
													"value": "32652613",
													"description": "(Required) id события"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"annotation\": \"Эксклюзивность нашего шоу гарантирует привлечение максимальной зрительской аудитории\",\n  \"category\": {\n    \"name\": \"Концерты\",\n    \"id\": 1\n  },\n  \"initiator\": {\n    \"id\": 3,\n    \"name\": \"Фёдоров Матвей\"\n  },\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"title\": \"Знаменитое шоу \\\"Летающая кукуруза\\\"\",\n  \"confirmedRequests\": 5,\n  \"createdOn\": \"yyyy-MM-dd HH:mm:ss\",\n  \"description\": \"Что получится, если соединить кукурузу и полёт? Создатели \\\"Шоу летающей кукурузы\\\" испытали эту идею на практике и воплотили в жизнь инновационный проект, предлагающий свежий взгляд на развлечения...\",\n  \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n  \"id\": 1,\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"publishedOn\": \"yyyy-MM-dd HH:mm:ss\",\n  \"requestModeration\": true,\n  \"state\": \"PUBLISHED\",\n  \"views\": 999\n}"
								},
								{
									"name": "Запрос составлен с ошибкой",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/events/:eventId/publish",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"events",
												":eventId",
												"publish"
											],
											"variable": [
												{
													"key": "eventId",
													"value": "32652613",
													"description": "(Required) id события"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Не выполнены условия для совершения операции",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/events/:eventId/publish",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"events",
												":eventId",
												"publish"
											],
											"variable": [
												{
													"key": "eventId",
													"value": "32652613",
													"description": "(Required) id события"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Объект не найден",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/events/:eventId/publish",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"events",
												":eventId",
												"publish"
											],
											"variable": [
												{
													"key": "eventId",
													"value": "32652613",
													"description": "(Required) id события"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"NOT_FOUND\",\n  \"reason\": \"The required object was not found.\",\n  \"message\": \"Event with id=21 was not found.\",\n  \"timestamp\": \"2022-09-07 09:10:50\"\n}"
								},
								{
									"name": "Запрос приводит к нарушению целостности данных",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/events/:eventId/publish",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"events",
												":eventId",
												"publish"
											],
											"variable": [
												{
													"key": "eventId",
													"value": "32652613",
													"description": "(Required) id события"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"CONFLICT\",\n  \"reason\": \"Integrity constraint has been violated\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:47:58\"\n}"
								},
								{
									"name": "Внутренняя ошибка сервера",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/events/:eventId/publish",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"events",
												":eventId",
												"publish"
											],
											"variable": [
												{
													"key": "eventId",
													"value": "32652613",
													"description": "(Required) id события"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"INTERNAL_SERVER_ERROR\",\n  \"reason\": \"Error occurred\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:23:27\"\n}"
								}
							]
						},
						{
							"name": "Отклонение события",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var body = {};\r",
											"let mail = 'email' + pm.collectionVariables.get(\"usersCount\") + '@yandex.ru';\r",
											"pm.collectionVariables.set('mail', mail)\r",
											"pm.collectionVariables.set(\"usersCount\", 1 + pm.collectionVariables.get(\"usersCount\"))\r",
											"body = {\r",
											"    'email': mail,\r",
											"    'name': 'Usver'\r",
											"};\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"baseUrl\") + '/admin/users',\r",
											"    method: 'POST',\r",
											"    body: JSON.stringify(body),\r",
											"    header: {'Content-Type': 'application/json'}\r",
											"    }, (error, response) => {\r",
											"        if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"            throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"        }\r",
											"        pm.collectionVariables.set('response', response.json())\r",
											"        pm.collectionVariables.set('uid', parseInt(response.json().id))\r",
											"        var body = {};\r",
											"        let name = 'name' + pm.collectionVariables.get(\"usersCount\");\r",
											"        pm.collectionVariables.set('name', name)\r",
											"        pm.collectionVariables.set(\"usersCount\", 1 + pm.collectionVariables.get(\"usersCount\"))\r",
											"        body = {\r",
											"            'name': name\r",
											"        };\r",
											"        pm.sendRequest({\r",
											"            url: pm.collectionVariables.get(\"baseUrl\") + '/admin/categories',\r",
											"            method: 'POST',\r",
											"            body: JSON.stringify(body),\r",
											"            header: {'Content-Type': 'application/json'}\r",
											"            }, (error, response) => {\r",
											"                if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"                    throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"                }\r",
											"                pm.collectionVariables.set('catid', response.json().id);\r",
											"                pm.collectionVariables.set('catname', response.json().name)\r",
											"               \r",
											"                    body = {\r",
											"                        \"annotation\": \"annotation169119129619612961691616161651651\",\r",
											"                        \"category\": pm.collectionVariables.get('catid'),\r",
											"                        \"description\": \"description9498465165165161616516516516516\",\r",
											"                        \"eventDate\": \"2095-09-06 13:30:38\",\r",
											"                        \"location\": {\r",
											"                            \"lat\": 10,\r",
											"                            \"lon\": 580\r",
											"                        },\r",
											"                        \"paid\": true,\r",
											"                        \"participantLimit\": 0,\r",
											"                        \"requestModeration\": true,\r",
											"                        \"title\": \"title\"\r",
											"                    };\r",
											"                    pm.sendRequest({\r",
											"                        url: pm.collectionVariables.get(\"baseUrl\") + '/users/' + pm.collectionVariables.get('uid') + '/events',\r",
											"                        method: 'POST',\r",
											"                        body: JSON.stringify(body),\r",
											"                        header: {'Content-Type': 'application/json'}\r",
											"                    }, (error, response) => {\r",
											"                        if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"                            throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"                        }\r",
											"                        pm.collectionVariables.set('eid', response.json().id);\r",
											"                        pm.collectionVariables.set('response', body)\r",
											"                    });\r",
											"                });\r",
											"            });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test event\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.state).to.eql(\"CANCELED\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/events/:eventId/reject",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"events",
										":eventId",
										"reject"
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eid}}",
											"description": "(Required) id события"
										}
									]
								},
								"description": "Обратите внимание: событие не должно быть опубликовано."
							},
							"response": [
								{
									"name": "Событие отклонено",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/events/:eventId/reject",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"events",
												":eventId",
												"reject"
											],
											"variable": [
												{
													"key": "eventId",
													"value": "32652613",
													"description": "(Required) id события"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"annotation\": \"Эксклюзивность нашего шоу гарантирует привлечение максимальной зрительской аудитории\",\n  \"category\": {\n    \"name\": \"Концерты\",\n    \"id\": 1\n  },\n  \"initiator\": {\n    \"id\": 3,\n    \"name\": \"Фёдоров Матвей\"\n  },\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"title\": \"Знаменитое шоу \\\"Летающая кукуруза\\\"\",\n  \"confirmedRequests\": 5,\n  \"createdOn\": \"yyyy-MM-dd HH:mm:ss\",\n  \"description\": \"Что получится, если соединить кукурузу и полёт? Создатели \\\"Шоу летающей кукурузы\\\" испытали эту идею на практике и воплотили в жизнь инновационный проект, предлагающий свежий взгляд на развлечения...\",\n  \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n  \"id\": 1,\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"publishedOn\": \"yyyy-MM-dd HH:mm:ss\",\n  \"requestModeration\": true,\n  \"state\": \"PUBLISHED\",\n  \"views\": 999\n}"
								},
								{
									"name": "Запрос составлен с ошибкой",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/events/:eventId/reject",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"events",
												":eventId",
												"reject"
											],
											"variable": [
												{
													"key": "eventId",
													"value": "32652613",
													"description": "(Required) id события"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Не выполнены условия для совершения операции",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/events/:eventId/reject",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"events",
												":eventId",
												"reject"
											],
											"variable": [
												{
													"key": "eventId",
													"value": "32652613",
													"description": "(Required) id события"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Объект не найден",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/events/:eventId/reject",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"events",
												":eventId",
												"reject"
											],
											"variable": [
												{
													"key": "eventId",
													"value": "32652613",
													"description": "(Required) id события"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"NOT_FOUND\",\n  \"reason\": \"The required object was not found.\",\n  \"message\": \"Event with id=21 was not found.\",\n  \"timestamp\": \"2022-09-07 09:10:50\"\n}"
								},
								{
									"name": "Запрос приводит к нарушению целостности данных",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/events/:eventId/reject",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"events",
												":eventId",
												"reject"
											],
											"variable": [
												{
													"key": "eventId",
													"value": "32652613",
													"description": "(Required) id события"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"CONFLICT\",\n  \"reason\": \"Integrity constraint has been violated\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:47:58\"\n}"
								},
								{
									"name": "Внутренняя ошибка сервера",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/events/:eventId/reject",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"events",
												":eventId",
												"reject"
											],
											"variable": [
												{
													"key": "eventId",
													"value": "32652613",
													"description": "(Required) id события"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"INTERNAL_SERVER_ERROR\",\n  \"reason\": \"Error occurred\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:23:27\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "users",
					"item": [
						{
							"name": "Поиск пользователей",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var body = {};\r",
											"let mail = 'email' + pm.collectionVariables.get(\"usersCount\") + '@gmail.com';\r",
											"pm.collectionVariables.set('mail', mail)\r",
											"pm.collectionVariables.set(\"usersCount\", pm.collectionVariables.get(\"usersCount\") + 1)\r",
											"body = {\r",
											"    'email': mail,\r",
											"    'name': 'Usver'\r",
											"};\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"baseUrl\") + '/admin/users',\r",
											"    method: 'POST',\r",
											"    body: JSON.stringify(body),\r",
											"    header: {'Content-Type': 'application/json'}\r",
											"}, (error, response) => {\r",
											"    if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"        throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"    }\r",
											"    pm.collectionVariables.set('response', response.json())\r",
											"    pm.collectionVariables.set('uid', response.json().id)\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Test user\", function () {\r",
											"    var jsonData = pm.response.json()[pm.response.json().length - 1];\r",
											"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get('response').id);\r",
											"    pm.expect(jsonData.email).to.eql(pm.collectionVariables.get('response').email);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/users?ids={{uid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"users"
									],
									"query": [
										{
											"key": "ids",
											"value": "{{uid}}",
											"description": "id пользователей"
										},
										{
											"key": "ids",
											"value": "-10833646",
											"description": "id пользователей",
											"disabled": true
										},
										{
											"key": "from",
											"value": "0",
											"description": "количество элементов, которые нужно пропустить для формирования текущего набора",
											"disabled": true
										},
										{
											"key": "size",
											"value": "10",
											"description": "количество элементов в наборе",
											"disabled": true
										}
									]
								}
							},
							"response": [
								{
									"name": "Пользователи найдены",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/users?ids=-70289167&ids=20327827&from=0&size=10",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users"
											],
											"query": [
												{
													"key": "ids",
													"value": "-70289167"
												},
												{
													"key": "ids",
													"value": "20327827"
												},
												{
													"key": "from",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"email\": \"petrov.i@practicummail.ru\",\n    \"name\": \"Петров Иван\",\n    \"id\": 1\n  },\n  {\n    \"email\": \"petrov.i@practicummail.ru\",\n    \"name\": \"Петров Иван\",\n    \"id\": 1\n  }\n]"
								},
								{
									"name": "Запрос составлен с ошибкой",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/users?ids=-70289167&ids=20327827&from=0&size=10",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users"
											],
											"query": [
												{
													"key": "ids",
													"value": "-70289167"
												},
												{
													"key": "ids",
													"value": "20327827"
												},
												{
													"key": "from",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Не выполнены условия для совершения операции",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/users?ids=-70289167&ids=20327827&from=0&size=10",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users"
											],
											"query": [
												{
													"key": "ids",
													"value": "-70289167"
												},
												{
													"key": "ids",
													"value": "20327827"
												},
												{
													"key": "from",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Объект не найден",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/users?ids=-70289167&ids=20327827&from=0&size=10",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users"
											],
											"query": [
												{
													"key": "ids",
													"value": "-70289167"
												},
												{
													"key": "ids",
													"value": "20327827"
												},
												{
													"key": "from",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"NOT_FOUND\",\n  \"reason\": \"The required object was not found.\",\n  \"message\": \"Event with id=21 was not found.\",\n  \"timestamp\": \"2022-09-07 09:10:50\"\n}"
								},
								{
									"name": "Запрос приводит к нарушению целостности данных",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/users?ids=-70289167&ids=20327827&from=0&size=10",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users"
											],
											"query": [
												{
													"key": "ids",
													"value": "-70289167"
												},
												{
													"key": "ids",
													"value": "20327827"
												},
												{
													"key": "from",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"CONFLICT\",\n  \"reason\": \"Integrity constraint has been violated\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:47:58\"\n}"
								},
								{
									"name": "Внутренняя ошибка сервера",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/users?ids=-70289167&ids=20327827&from=0&size=10",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users"
											],
											"query": [
												{
													"key": "ids",
													"value": "-70289167"
												},
												{
													"key": "ids",
													"value": "20327827"
												},
												{
													"key": "from",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"INTERNAL_SERVER_ERROR\",\n  \"reason\": \"Error occurred\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:23:27\"\n}"
								}
							]
						},
						{
							"name": "Добавление нового пользователя",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var body = {};\r",
											"let mail = 'email' + pm.collectionVariables.get(\"usersCount\") + '@gmail.com';\r",
											"pm.collectionVariables.set('mail', mail)\r",
											"pm.collectionVariables.set(\"usersCount\", pm.collectionVariables.get(\"usersCount\") + 1)\r",
											"body = {\r",
											"    email: mail,\r",
											"    name: 'Usver'\r",
											"};\r",
											"pm.collectionVariables.set('request_body', JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"uid\", pm.response.json().id);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.sendRequest(pm.collectionVariables.get(\"baseUrl\") + '/admin/users?&ids=' + pm.collectionVariables.get(\"uid\"), (error, response) => {\r",
											"    if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"        throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"    }\r",
											"    pm.test(\"Test user\", function () {\r",
											"    var jsonData = response.json()[response.json().length - 1];\r",
											"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get('uid'));\r",
											"    pm.expect(jsonData.email).to.eql(pm.collectionVariables.get('mail'));\r",
											"});\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"users"
									]
								}
							},
							"response": [
								{
									"name": "Пользователь зарегистрирован",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"petrov.i@practicummail.ru\",\n  \"name\": \"Петров Иван\",\n  \"id\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"email\": \"petrov.i@practicummail.ru\",\n  \"name\": \"Петров Иван\",\n  \"id\": 1\n}"
								},
								{
									"name": "Запрос составлен с ошибкой",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"petrov.i@practicummail.ru\",\n  \"name\": \"Петров Иван\",\n  \"id\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Не выполнены условия для совершения операции",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"petrov.i@practicummail.ru\",\n  \"name\": \"Петров Иван\",\n  \"id\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Объект не найден",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"petrov.i@practicummail.ru\",\n  \"name\": \"Петров Иван\",\n  \"id\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"NOT_FOUND\",\n  \"reason\": \"The required object was not found.\",\n  \"message\": \"Event with id=21 was not found.\",\n  \"timestamp\": \"2022-09-07 09:10:50\"\n}"
								},
								{
									"name": "Запрос приводит к нарушению целостности данных",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"petrov.i@practicummail.ru\",\n  \"name\": \"Петров Иван\",\n  \"id\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users"
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"CONFLICT\",\n  \"reason\": \"Integrity constraint has been violated\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:47:58\"\n}"
								},
								{
									"name": "Внутренняя ошибка сервера",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"petrov.i@practicummail.ru\",\n  \"name\": \"Петров Иван\",\n  \"id\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"INTERNAL_SERVER_ERROR\",\n  \"reason\": \"Error occurred\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:23:27\"\n}"
								}
							]
						},
						{
							"name": "Удаление пользователя",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var body = {};\r",
											"let mail = 'email' + pm.collectionVariables.get(\"usersCount\") + '@gmail.com';\r",
											"pm.collectionVariables.set('mail', mail)\r",
											"pm.collectionVariables.set(\"usersCount\", pm.collectionVariables.get(\"usersCount\") + 1)\r",
											"body = {\r",
											"    'email': mail,\r",
											"    'name': 'Usver'\r",
											"};\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"baseUrl\") + '/admin/users',\r",
											"    method: 'POST',\r",
											"    body: JSON.stringify(body),\r",
											"    header: {'Content-Type': 'application/json'}\r",
											"}, (error, response) => {\r",
											"    if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"        throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"    }\r",
											"    pm.collectionVariables.set('response', response.json())\r",
											"    pm.collectionVariables.set('uid', response.json().id)\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}",
											"description": "(Required) id пользователя"
										}
									]
								}
							},
							"response": [
								{
									"name": "Пользователь удален",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/users/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id пользователя"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Запрос составлен с ошибкой",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/users/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id пользователя"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Не выполнены условия для совершения операции",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/users/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id пользователя"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Объект не найден",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/users/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id пользователя"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"NOT_FOUND\",\n  \"reason\": \"The required object was not found.\",\n  \"message\": \"Event with id=21 was not found.\",\n  \"timestamp\": \"2022-09-07 09:10:50\"\n}"
								},
								{
									"name": "Запрос приводит к нарушению целостности данных",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/users/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id пользователя"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"CONFLICT\",\n  \"reason\": \"Integrity constraint has been violated\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:47:58\"\n}"
								},
								{
									"name": "Внутренняя ошибка сервера",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/users/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id пользователя"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"INTERNAL_SERVER_ERROR\",\n  \"reason\": \"Error occurred\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:23:27\"\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "categories",
			"item": [
				{
					"name": "Получение категорий",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var body = {};\r",
									"let name = 'name' + pm.collectionVariables.get(\"usersCount\");\r",
									"pm.collectionVariables.set('name', name)\r",
									"pm.collectionVariables.set(\"usersCount\", pm.collectionVariables.get(\"usersCount\") + 1)\r",
									"body = {\r",
									"    'name': name\r",
									"};\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: pm.collectionVariables.get(\"baseUrl\") + '/admin/categories',\r",
									"    method: 'POST',\r",
									"    body: JSON.stringify(body),\r",
									"    header: {'Content-Type': 'application/json'}\r",
									"}, (error, response) => {\r",
									"    if(error || (response.code >= 400 && response.code <= 599)) {\r",
									"        throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
									"    }\r",
									"    pm.collectionVariables.set('response', response.json())\r",
									"    pm.collectionVariables.set('catid', response.json().id)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test user\", function () {\r",
									"    var jsonData = pm.response.json()[pm.response.json().length - 1];\r",
									"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get('response').id);\r",
									"    pm.expect(jsonData.name).to.eql(pm.collectionVariables.get('response').name);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/categories?from=0&size=1000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories"
							],
							"query": [
								{
									"key": "from",
									"value": "0",
									"description": "количество категорий, которые нужно пропустить для формирования текущего набора"
								},
								{
									"key": "size",
									"value": "1000",
									"description": "количество категорий в наборе"
								}
							]
						}
					},
					"response": [
						{
							"name": "Категории найдены",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/categories?from=0&size=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "10"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"name\": \"Концерты\",\n    \"id\": 1\n  },\n  {\n    \"name\": \"Концерты\",\n    \"id\": 1\n  }\n]"
						},
						{
							"name": "Запрос составлен с ошибкой",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/categories?from=0&size=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "10"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
						},
						{
							"name": "Не выполнены условия для совершения операции",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/categories?from=0&size=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "10"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
						},
						{
							"name": "Объект не найден",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/categories?from=0&size=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "10"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"NOT_FOUND\",\n  \"reason\": \"The required object was not found.\",\n  \"message\": \"Event with id=21 was not found.\",\n  \"timestamp\": \"2022-09-07 09:10:50\"\n}"
						},
						{
							"name": "Запрос приводит к нарушению целостности данных",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/categories?from=0&size=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "10"
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"CONFLICT\",\n  \"reason\": \"Integrity constraint has been violated\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:47:58\"\n}"
						},
						{
							"name": "Внутренняя ошибка сервера",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/categories?from=0&size=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "10"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"INTERNAL_SERVER_ERROR\",\n  \"reason\": \"Error occurred\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:23:27\"\n}"
						}
					]
				},
				{
					"name": "Получение информации о категории по её идентификатору",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var body = {};\r",
									"let name = 'name' + pm.collectionVariables.get(\"usersCount\");\r",
									"pm.collectionVariables.set('name', name)\r",
									"pm.collectionVariables.set(\"usersCount\", pm.collectionVariables.get(\"usersCount\") + 1)\r",
									"body = {\r",
									"    'name': name\r",
									"};\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: pm.collectionVariables.get(\"baseUrl\") + '/admin/categories',\r",
									"    method: 'POST',\r",
									"    body: JSON.stringify(body),\r",
									"    header: {'Content-Type': 'application/json'}\r",
									"}, (error, response) => {\r",
									"    if(error || (response.code >= 400 && response.code <= 599)) {\r",
									"        throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
									"    }\r",
									"    pm.collectionVariables.set('response', response.json())\r",
									"    pm.collectionVariables.set('catid', response.json().id)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test user\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get('response').id);\r",
									"    pm.expect(jsonData.name).to.eql(pm.collectionVariables.get('response').name);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/categories/:catId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories",
								":catId"
							],
							"variable": [
								{
									"key": "catId",
									"value": "{{catid}}",
									"description": "(Required) id категории"
								}
							]
						}
					},
					"response": [
						{
							"name": "Категория найдена",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/categories/:catId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":catId"
									],
									"variable": [
										{
											"key": "catId",
											"value": "32652613",
											"description": "(Required) id категории"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"name\": \"Концерты\",\n  \"id\": 1\n}"
						},
						{
							"name": "Запрос составлен с ошибкой",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/categories/:catId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":catId"
									],
									"variable": [
										{
											"key": "catId",
											"value": "32652613",
											"description": "(Required) id категории"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
						},
						{
							"name": "Не выполнены условия для совершения операции",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/categories/:catId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":catId"
									],
									"variable": [
										{
											"key": "catId",
											"value": "32652613",
											"description": "(Required) id категории"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
						},
						{
							"name": "Объект не найден",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/categories/:catId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":catId"
									],
									"variable": [
										{
											"key": "catId",
											"value": "32652613",
											"description": "(Required) id категории"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"NOT_FOUND\",\n  \"reason\": \"The required object was not found.\",\n  \"message\": \"Event with id=21 was not found.\",\n  \"timestamp\": \"2022-09-07 09:10:50\"\n}"
						},
						{
							"name": "Запрос приводит к нарушению целостности данных",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/categories/:catId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":catId"
									],
									"variable": [
										{
											"key": "catId",
											"value": "32652613",
											"description": "(Required) id категории"
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"CONFLICT\",\n  \"reason\": \"Integrity constraint has been violated\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:47:58\"\n}"
						},
						{
							"name": "Внутренняя ошибка сервера",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/categories/:catId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":catId"
									],
									"variable": [
										{
											"key": "catId",
											"value": "32652613",
											"description": "(Required) id категории"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"INTERNAL_SERVER_ERROR\",\n  \"reason\": \"Error occurred\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:23:27\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "compilations",
			"item": [
				{
					"name": "Получение подборок событий",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var body = {};\r",
									"let title = 'title' + pm.collectionVariables.get(\"usersCount\");\r",
									"let mail = 'email' + pm.collectionVariables.get(\"usersCount\") + '@yandex.ru';\r",
									"pm.collectionVariables.set(\"usersCount\", pm.collectionVariables.get(\"usersCount\") + 1)\r",
									"pm.collectionVariables.set('mail', mail)\r",
									"body = {\r",
									"    'email': mail,\r",
									"    'name': 'Usver'\r",
									"};\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: pm.collectionVariables.get(\"baseUrl\") + '/admin/users',\r",
									"    method: 'POST',\r",
									"    body: JSON.stringify(body),\r",
									"    header: {'Content-Type': 'application/json'}\r",
									"    }, (error, response) => {\r",
									"        if(error || (response.code >= 400 && response.code <= 599)) {\r",
									"            throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
									"        }\r",
									"        pm.collectionVariables.set('response', response.json())\r",
									"        pm.collectionVariables.set('uid', response.json().id)\r",
									"        var body = {};\r",
									"        let name = 'name' + pm.collectionVariables.get(\"usersCount\");\r",
									"        pm.collectionVariables.set('name', response.json().name)\r",
									"        pm.collectionVariables.set(\"usersCount\", pm.collectionVariables.get(\"usersCount\") + 1)\r",
									"        body = {\r",
									"            'name': name\r",
									"        };\r",
									"        pm.sendRequest({\r",
									"            url: pm.collectionVariables.get(\"baseUrl\") + '/admin/categories',\r",
									"            method: 'POST',\r",
									"            body: JSON.stringify(body),\r",
									"            header: {'Content-Type': 'application/json'}\r",
									"            }, (error, response) => {\r",
									"                if(error || (response.code >= 400 && response.code <= 599)) {\r",
									"                    throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
									"                }\r",
									"                pm.collectionVariables.set('catid', response.json().id);\r",
									"                pm.collectionVariables.set('catname', response.json().name)\r",
									"                body = {\r",
									"                    annotation: \"annotation169119129619612961691616161651651\",\r",
									"                    category: pm.collectionVariables.get(\"catid\"),\r",
									"                    description: \"description9498465165165161616516516516516\",\r",
									"                    eventDate: \"2095-09-06 13:30:38\",\r",
									"                    location: {\r",
									"                        lat: 10,\r",
									"                        lon: 580,\r",
									"                    },\r",
									"                    paid: true,\r",
									"                    participantLimit: 0,\r",
									"                    requestModeration: true,\r",
									"                    title: \"title\",\r",
									"                };\r",
									"                pm.sendRequest({\r",
									"                    url: pm.collectionVariables.get(\"baseUrl\") + '/users/' + pm.collectionVariables.get('uid') + '/events',\r",
									"                    method: 'POST',\r",
									"                    body: JSON.stringify(body),\r",
									"                    header: {'Content-Type': 'application/json'}\r",
									"                    }, (error, response) => {\r",
									"                        if(error || (response.code >= 400 && response.code <= 599)) {\r",
									"                            throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
									"                        }\r",
									"                        pm.collectionVariables.set('eid', response.json().id);\r",
									"                        body = {\r",
									"                            \"events\": [],\r",
									"                            \"pinned\": true,\r",
									"                            \"title\": title\r",
									"                        };\r",
									"                        pm.sendRequest({\r",
									"                        url: pm.collectionVariables.get(\"baseUrl\") + '/admin/compilations',\r",
									"                        method: 'POST',\r",
									"                        body: JSON.stringify(body),\r",
									"                        header: {'Content-Type': 'application/json'}\r",
									"                        }, (error, response) => {\r",
									"                            if(error || (response.code >= 400 && response.code <= 599)) {\r",
									"                                throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
									"                            }\r",
									"                            pm.collectionVariables.set('compid', response.json().id);\r",
									"                            pm.collectionVariables.set('response', response.json());\r",
									"                        });\r",
									"                });\r",
									"        });\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Test event\", function () {\r",
									"    var jsonData = pm.response.json()[pm.response.json().length-1];\r",
									"    var toCheck = pm.collectionVariables.get('response');\r",
									"    pm.expect(jsonData.id).to.eql(toCheck.id);\r",
									"    pm.expect(jsonData.title).to.eql(toCheck.title);\r",
									"    pm.expect(jsonData.pinned).to.eql(toCheck.pinned);\r",
									"    pm.expect(jsonData.events).to.eql(toCheck.events);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/compilations?pinned=true&from=0&size=1000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"compilations"
							],
							"query": [
								{
									"key": "pinned",
									"value": "true",
									"description": "искать только закрепленные/не закрепленные подборки"
								},
								{
									"key": "from",
									"value": "0",
									"description": "количество элементов, которые нужно пропустить для формирования текущего набора"
								},
								{
									"key": "size",
									"value": "1000",
									"description": "количество элементов в наборе"
								}
							]
						}
					},
					"response": [
						{
							"name": "Найдены подборки событий",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/compilations?pinned=false&from=0&size=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"compilations"
									],
									"query": [
										{
											"key": "pinned",
											"value": "false"
										},
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "10"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"title\": \"Водные активности\",\n    \"events\": [\n      {\n        \"annotation\": \"Эксклюзивность нашего шоу гарантирует привлечение максимальной зрительской аудитории\",\n        \"category\": {\n          \"name\": \"Концерты\",\n          \"id\": 1\n        },\n        \"initiator\": {\n          \"id\": 3,\n          \"name\": \"Фёдоров Матвей\"\n        },\n        \"title\": \"Знаменитое шоу \\\"Летающая кукуруза\\\"\",\n        \"confirmedRequests\": 5,\n        \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n        \"id\": 1,\n        \"paid\": true,\n        \"views\": 999\n      }\n    ],\n    \"id\": 1,\n    \"pinned\": true\n  },\n  {\n    \"title\": \"Водные активности\",\n    \"events\": [\n      {\n        \"annotation\": \"Эксклюзивность нашего шоу гарантирует привлечение максимальной зрительской аудитории\",\n        \"category\": {\n          \"name\": \"Концерты\",\n          \"id\": 1\n        },\n        \"initiator\": {\n          \"id\": 3,\n          \"name\": \"Фёдоров Матвей\"\n        },\n        \"title\": \"Знаменитое шоу \\\"Летающая кукуруза\\\"\",\n        \"confirmedRequests\": 5,\n        \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n        \"id\": 1,\n        \"paid\": true,\n        \"views\": 999\n      }\n    ],\n    \"id\": 1,\n    \"pinned\": true\n  }\n]"
						},
						{
							"name": "Запрос составлен с ошибкой",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/compilations?pinned=true&from=0&size=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"compilations"
									],
									"query": [
										{
											"key": "pinned",
											"value": "true"
										},
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "10"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
						},
						{
							"name": "Не выполнены условия для совершения операции",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/compilations?pinned=true&from=0&size=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"compilations"
									],
									"query": [
										{
											"key": "pinned",
											"value": "true"
										},
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "10"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
						},
						{
							"name": "Объект не найден",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/compilations?pinned=true&from=0&size=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"compilations"
									],
									"query": [
										{
											"key": "pinned",
											"value": "true"
										},
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "10"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"NOT_FOUND\",\n  \"reason\": \"The required object was not found.\",\n  \"message\": \"Event with id=21 was not found.\",\n  \"timestamp\": \"2022-09-07 09:10:50\"\n}"
						},
						{
							"name": "Запрос приводит к нарушению целостности данных",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/compilations?pinned=true&from=0&size=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"compilations"
									],
									"query": [
										{
											"key": "pinned",
											"value": "true"
										},
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "10"
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"CONFLICT\",\n  \"reason\": \"Integrity constraint has been violated\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:47:58\"\n}"
						},
						{
							"name": "Внутренняя ошибка сервера",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/compilations?pinned=true&from=0&size=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"compilations"
									],
									"query": [
										{
											"key": "pinned",
											"value": "true"
										},
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "10"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"INTERNAL_SERVER_ERROR\",\n  \"reason\": \"Error occurred\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:23:27\"\n}"
						}
					]
				},
				{
					"name": "Получение подборки событий по его id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var body = {};\r",
									"let title = 'title' + pm.collectionVariables.get(\"usersCount\");\r",
									"let mail = 'email' + pm.collectionVariables.get(\"usersCount\") + '@yandex.ru';\r",
									"pm.collectionVariables.set(\"usersCount\", pm.collectionVariables.get(\"usersCount\") + 1)\r",
									"pm.collectionVariables.set('mail', mail)\r",
									"body = {\r",
									"    'email': mail,\r",
									"    'name': 'Usver'\r",
									"};\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: pm.collectionVariables.get(\"baseUrl\") + '/admin/users',\r",
									"    method: 'POST',\r",
									"    body: JSON.stringify(body),\r",
									"    header: {'Content-Type': 'application/json'}\r",
									"    }, (error, response) => {\r",
									"        if(error || (response.code >= 400 && response.code <= 599)) {\r",
									"            throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
									"        }\r",
									"        pm.collectionVariables.set('response', response.json())\r",
									"        pm.collectionVariables.set('uid', response.json().id)\r",
									"        var body = {};\r",
									"        let name = 'name' + pm.collectionVariables.get(\"usersCount\");\r",
									"        pm.collectionVariables.set('name', response.json().name)\r",
									"        pm.collectionVariables.set(\"usersCount\", pm.collectionVariables.get(\"usersCount\") + 1)\r",
									"        body = {\r",
									"            'name': name\r",
									"        };\r",
									"        pm.sendRequest({\r",
									"            url: pm.collectionVariables.get(\"baseUrl\") + '/admin/categories',\r",
									"            method: 'POST',\r",
									"            body: JSON.stringify(body),\r",
									"            header: {'Content-Type': 'application/json'}\r",
									"            }, (error, response) => {\r",
									"                if(error || (response.code >= 400 && response.code <= 599)) {\r",
									"                    throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
									"                }\r",
									"                pm.collectionVariables.set('catid', response.json().id);\r",
									"                pm.collectionVariables.set('catname', response.json().name)\r",
									"                body = {\r",
									"                    annotation: \"annotation169119129619612961691616161651651\",\r",
									"                    category: pm.collectionVariables.get(\"catid\"),\r",
									"                    description: \"description9498465165165161616516516516516\",\r",
									"                    eventDate: \"2095-09-06 13:30:38\",\r",
									"                    location: {\r",
									"                        lat: 10,\r",
									"                        lon: 580,\r",
									"                    },\r",
									"                    paid: true,\r",
									"                    participantLimit: 0,\r",
									"                    requestModeration: true,\r",
									"                    title: \"title\",\r",
									"                };\r",
									"                pm.sendRequest({\r",
									"                    url: pm.collectionVariables.get(\"baseUrl\") + '/users/' + pm.collectionVariables.get('uid') + '/events',\r",
									"                    method: 'POST',\r",
									"                    body: JSON.stringify(body),\r",
									"                    header: {'Content-Type': 'application/json'}\r",
									"                    }, (error, response) => {\r",
									"                        if(error || (response.code >= 400 && response.code <= 599)) {\r",
									"                            throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
									"                        }\r",
									"                        pm.collectionVariables.set('eid', response.json().id);\r",
									"                        body = {\r",
									"                            \"events\": [],\r",
									"                            \"pinned\": true,\r",
									"                            \"title\": title\r",
									"                        };\r",
									"                        pm.sendRequest({\r",
									"                        url: pm.collectionVariables.get(\"baseUrl\") + '/admin/compilations',\r",
									"                        method: 'POST',\r",
									"                        body: JSON.stringify(body),\r",
									"                        header: {'Content-Type': 'application/json'}\r",
									"                        }, (error, response) => {\r",
									"                            if(error || (response.code >= 400 && response.code <= 599)) {\r",
									"                                throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
									"                            }\r",
									"                            pm.collectionVariables.set('compid', response.json().id);\r",
									"                            pm.collectionVariables.set('response', response.json());\r",
									"                        });\r",
									"                });\r",
									"        });\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Test event\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var toCheck = pm.collectionVariables.get('response');\r",
									"    pm.expect(jsonData.id).to.eql(toCheck.id);\r",
									"    pm.expect(jsonData.title).to.eql(toCheck.title);\r",
									"    pm.expect(jsonData.pinned).to.eql(toCheck.pinned);\r",
									"    pm.expect(jsonData.events).to.eql(toCheck.events);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/compilations/:compId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"compilations",
								":compId"
							],
							"variable": [
								{
									"key": "compId",
									"value": "{{compid}}",
									"description": "(Required) id подборки"
								}
							]
						}
					},
					"response": [
						{
							"name": "Подборка событий найдена",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/compilations/:compId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"compilations",
										":compId"
									],
									"variable": [
										{
											"key": "compId",
											"value": "32652613",
											"description": "(Required) id подборки"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Водные активности\",\n  \"events\": [\n    {\n      \"annotation\": \"Эксклюзивность нашего шоу гарантирует привлечение максимальной зрительской аудитории\",\n      \"category\": {\n        \"name\": \"Концерты\",\n        \"id\": 1\n      },\n      \"initiator\": {\n        \"id\": 3,\n        \"name\": \"Фёдоров Матвей\"\n      },\n      \"title\": \"Знаменитое шоу \\\"Летающая кукуруза\\\"\",\n      \"confirmedRequests\": 5,\n      \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n      \"id\": 1,\n      \"paid\": true,\n      \"views\": 999\n    }\n  ],\n  \"id\": 1,\n  \"pinned\": true\n}"
						},
						{
							"name": "Запрос составлен с ошибкой",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/compilations/:compId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"compilations",
										":compId"
									],
									"variable": [
										{
											"key": "compId",
											"value": "32652613",
											"description": "(Required) id подборки"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
						},
						{
							"name": "Не выполнены условия для совершения операции",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/compilations/:compId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"compilations",
										":compId"
									],
									"variable": [
										{
											"key": "compId",
											"value": "32652613",
											"description": "(Required) id подборки"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
						},
						{
							"name": "Объект не найден",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/compilations/:compId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"compilations",
										":compId"
									],
									"variable": [
										{
											"key": "compId",
											"value": "32652613",
											"description": "(Required) id подборки"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"NOT_FOUND\",\n  \"reason\": \"The required object was not found.\",\n  \"message\": \"Event with id=21 was not found.\",\n  \"timestamp\": \"2022-09-07 09:10:50\"\n}"
						},
						{
							"name": "Запрос приводит к нарушению целостности данных",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/compilations/:compId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"compilations",
										":compId"
									],
									"variable": [
										{
											"key": "compId",
											"value": "32652613",
											"description": "(Required) id подборки"
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"CONFLICT\",\n  \"reason\": \"Integrity constraint has been violated\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:47:58\"\n}"
						},
						{
							"name": "Внутренняя ошибка сервера",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/compilations/:compId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"compilations",
										":compId"
									],
									"variable": [
										{
											"key": "compId",
											"value": "32652613",
											"description": "(Required) id подборки"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"INTERNAL_SERVER_ERROR\",\n  \"reason\": \"Error occurred\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:23:27\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "events",
			"item": [
				{
					"name": "Получение событий с возможностью фильтрации",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var body = {};\r",
									"let mail = 'email' + pm.collectionVariables.get(\"usersCount\") + '@yandex.ru';\r",
									"pm.collectionVariables.set('mail', mail)\r",
									"pm.collectionVariables.set(\"usersCount\", 1 + pm.collectionVariables.get(\"usersCount\"))\r",
									"body = {\r",
									"    'email': mail,\r",
									"    'name': 'Usver'\r",
									"};\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: pm.collectionVariables.get(\"baseUrl\") + '/admin/users',\r",
									"    method: 'POST',\r",
									"    body: JSON.stringify(body),\r",
									"    header: {'Content-Type': 'application/json'}\r",
									"    }, (error, response) => {\r",
									"        if(error || (response.code >= 400 && response.code <= 599)) {\r",
									"            throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
									"        }\r",
									"        pm.collectionVariables.set('response', response.json())\r",
									"        pm.collectionVariables.set('uid', parseInt(response.json().id))\r",
									"        var body = {};\r",
									"        let name = 'name' + pm.collectionVariables.get(\"usersCount\");\r",
									"        pm.collectionVariables.set('name', name)\r",
									"        pm.collectionVariables.set(\"usersCount\", 1 + pm.collectionVariables.get(\"usersCount\"))\r",
									"        body = {\r",
									"            'name': name\r",
									"        };\r",
									"        pm.sendRequest({\r",
									"            url: pm.collectionVariables.get(\"baseUrl\") + '/admin/categories',\r",
									"            method: 'POST',\r",
									"            body: JSON.stringify(body),\r",
									"            header: {'Content-Type': 'application/json'}\r",
									"            }, (error, response) => {\r",
									"                if(error || (response.code >= 400 && response.code <= 599)) {\r",
									"                    throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
									"                }\r",
									"                pm.collectionVariables.set('catid', response.json().id);\r",
									"                pm.collectionVariables.set('catname', response.json().name)\r",
									"               \r",
									"                body = {\r",
									"                    \"annotation\": \"annotation169119129619612961691616161651651\",\r",
									"                    \"category\": pm.collectionVariables.get('catid'),\r",
									"                    \"description\": \"description9498465165165161616516516516516\",\r",
									"                    \"eventDate\": \"2095-09-06 13:30:38\",\r",
									"                    \"location\": {\r",
									"                        \"lat\": 10,\r",
									"                        \"lon\": 580\r",
									"                    },\r",
									"                    \"paid\": true,\r",
									"                    \"participantLimit\": 20,\r",
									"                    \"requestModeration\": true,\r",
									"                    \"title\": \"title\"\r",
									"                };\r",
									"                pm.sendRequest({\r",
									"                    url: pm.collectionVariables.get(\"baseUrl\") + '/users/' + pm.collectionVariables.get('uid') + '/events',\r",
									"                    method: 'POST',\r",
									"                    body: JSON.stringify(body),\r",
									"                    header: {'Content-Type': 'application/json'}\r",
									"                }, (error, response) => {\r",
									"                    if(error || (response.code >= 400 && response.code <= 599)) {\r",
									"                        throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
									"                    }\r",
									"                    pm.collectionVariables.set('eid', response.json().id);\r",
									"                    pm.collectionVariables.set('response', response.json())\r",
									"                    pm.sendRequest({\r",
									"                        url: pm.collectionVariables.get(\"baseUrl\") + '/admin/events/' + pm.collectionVariables.get(\"eid\") + '/publish',\r",
									"                        method: 'PATCH'\r",
									"                        }, (error, response) => {\r",
									"                            if(error || (response.code >= 400 && response.code <= 599)) {\r",
									"                                throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
									"                            }\r",
									"                            \r",
									"                    });\r",
									"                });\r",
									"            });\r",
									"        });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Test event\", function () {\r",
									"    var jsonData = pm.response.json()[0];\r",
									"    var toCheck = pm.collectionVariables.get('response');\r",
									"    pm.expect(jsonData.id).to.eql(toCheck.id);\r",
									"    pm.expect(jsonData.title).to.eql(toCheck.title);\r",
									"    pm.expect(jsonData.annotation).to.eql(toCheck.annotation);\r",
									"    pm.expect(jsonData.eventDate).to.eql(toCheck.eventDate);\r",
									"    pm.expect(jsonData.category.id).to.eql(toCheck.category.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/events?text=296196129616&categories={{catid}}&paid=true&rangeStart=2022-01-01 13:30:38&rangeEnd=2097-09-06 13:30:38&onlyAvailable=false&sort=EVENT_DATE&from=0&size=1000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events"
							],
							"query": [
								{
									"key": "text",
									"value": "296196129616",
									"description": "текст для поиска в содержимом аннотации и подробном описании события"
								},
								{
									"key": "categories",
									"value": "{{catid}}",
									"description": "список идентификаторов категорий в которых будет вестись поиск"
								},
								{
									"key": "paid",
									"value": "true",
									"description": "поиск только платных/бесплатных событий"
								},
								{
									"key": "rangeStart",
									"value": "2022-01-01 13:30:38",
									"description": "дата и время не раньше которых должно произойти событие"
								},
								{
									"key": "rangeEnd",
									"value": "2097-09-06 13:30:38",
									"description": "дата и время не позже которых должно произойти событие"
								},
								{
									"key": "onlyAvailable",
									"value": "false",
									"description": "только события у которых не исчерпан лимит запросов на участие"
								},
								{
									"key": "sort",
									"value": "EVENT_DATE",
									"description": "Вариант сортировки: по дате события или по количеству просмотров"
								},
								{
									"key": "from",
									"value": "0",
									"description": "количество событий, которые нужно пропустить для формирования текущего набора"
								},
								{
									"key": "size",
									"value": "1000",
									"description": "количество событий в наборе"
								}
							]
						},
						"description": "Обратите внимание: \n- это публичный эндпоинт, соответственно в выдаче должны быть только опубликованные события\n- текстовый поиск (по аннотации и подробному описанию) должен быть без учета регистра букв\n- если в запросе не указан диапазон дат [rangeStart-rangeEnd], то нужно выгружать события, которые произойдут позже текущей даты и времени\n- информация о каждом событии должна включать в себя количество просмотров и количество уже одобренных заявок на участие\n- информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики"
					},
					"response": [
						{
							"name": "События найдены",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events?text=aliquip veniam do&categories=-70289167&categories=20327827&paid=true&rangeStart=aliquip veniam do&rangeEnd=aliquip veniam do&onlyAvailable=false&sort=EVENT_DATE&from=0&size=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events"
									],
									"query": [
										{
											"key": "text",
											"value": "aliquip veniam do"
										},
										{
											"key": "categories",
											"value": "-70289167"
										},
										{
											"key": "categories",
											"value": "20327827"
										},
										{
											"key": "paid",
											"value": "true"
										},
										{
											"key": "rangeStart",
											"value": "aliquip veniam do"
										},
										{
											"key": "rangeEnd",
											"value": "aliquip veniam do"
										},
										{
											"key": "onlyAvailable",
											"value": "false"
										},
										{
											"key": "sort",
											"value": "EVENT_DATE"
										},
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "10"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"annotation\": \"Эксклюзивность нашего шоу гарантирует привлечение максимальной зрительской аудитории\",\n    \"category\": {\n      \"name\": \"Концерты\",\n      \"id\": 1\n    },\n    \"initiator\": {\n      \"id\": 3,\n      \"name\": \"Фёдоров Матвей\"\n    },\n    \"title\": \"Знаменитое шоу \\\"Летающая кукуруза\\\"\",\n    \"confirmedRequests\": 5,\n    \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n    \"id\": 1,\n    \"paid\": true,\n    \"views\": 999\n  },\n  {\n    \"annotation\": \"Эксклюзивность нашего шоу гарантирует привлечение максимальной зрительской аудитории\",\n    \"category\": {\n      \"name\": \"Концерты\",\n      \"id\": 1\n    },\n    \"initiator\": {\n      \"id\": 3,\n      \"name\": \"Фёдоров Матвей\"\n    },\n    \"title\": \"Знаменитое шоу \\\"Летающая кукуруза\\\"\",\n    \"confirmedRequests\": 5,\n    \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n    \"id\": 1,\n    \"paid\": true,\n    \"views\": 999\n  }\n]"
						},
						{
							"name": "Запрос составлен с ошибкой",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events?text=aliquip veniam do&categories=-70289167&categories=20327827&paid=true&rangeStart=aliquip veniam do&rangeEnd=aliquip veniam do&onlyAvailable=false&sort=EVENT_DATE&from=0&size=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events"
									],
									"query": [
										{
											"key": "text",
											"value": "aliquip veniam do"
										},
										{
											"key": "categories",
											"value": "-70289167"
										},
										{
											"key": "categories",
											"value": "20327827"
										},
										{
											"key": "paid",
											"value": "true"
										},
										{
											"key": "rangeStart",
											"value": "aliquip veniam do"
										},
										{
											"key": "rangeEnd",
											"value": "aliquip veniam do"
										},
										{
											"key": "onlyAvailable",
											"value": "false"
										},
										{
											"key": "sort",
											"value": "EVENT_DATE"
										},
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "10"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
						},
						{
							"name": "Не выполнены условия для совершения операции",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events?text=aliquip veniam do&categories=-70289167&categories=20327827&paid=true&rangeStart=aliquip veniam do&rangeEnd=aliquip veniam do&onlyAvailable=false&sort=EVENT_DATE&from=0&size=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events"
									],
									"query": [
										{
											"key": "text",
											"value": "aliquip veniam do"
										},
										{
											"key": "categories",
											"value": "-70289167"
										},
										{
											"key": "categories",
											"value": "20327827"
										},
										{
											"key": "paid",
											"value": "true"
										},
										{
											"key": "rangeStart",
											"value": "aliquip veniam do"
										},
										{
											"key": "rangeEnd",
											"value": "aliquip veniam do"
										},
										{
											"key": "onlyAvailable",
											"value": "false"
										},
										{
											"key": "sort",
											"value": "EVENT_DATE"
										},
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "10"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
						},
						{
							"name": "Объект не найден",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events?text=aliquip veniam do&categories=-70289167&categories=20327827&paid=true&rangeStart=aliquip veniam do&rangeEnd=aliquip veniam do&onlyAvailable=false&sort=EVENT_DATE&from=0&size=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events"
									],
									"query": [
										{
											"key": "text",
											"value": "aliquip veniam do"
										},
										{
											"key": "categories",
											"value": "-70289167"
										},
										{
											"key": "categories",
											"value": "20327827"
										},
										{
											"key": "paid",
											"value": "true"
										},
										{
											"key": "rangeStart",
											"value": "aliquip veniam do"
										},
										{
											"key": "rangeEnd",
											"value": "aliquip veniam do"
										},
										{
											"key": "onlyAvailable",
											"value": "false"
										},
										{
											"key": "sort",
											"value": "EVENT_DATE"
										},
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "10"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"NOT_FOUND\",\n  \"reason\": \"The required object was not found.\",\n  \"message\": \"Event with id=21 was not found.\",\n  \"timestamp\": \"2022-09-07 09:10:50\"\n}"
						},
						{
							"name": "Запрос приводит к нарушению целостности данных",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events?text=aliquip veniam do&categories=-70289167&categories=20327827&paid=true&rangeStart=aliquip veniam do&rangeEnd=aliquip veniam do&onlyAvailable=false&sort=EVENT_DATE&from=0&size=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events"
									],
									"query": [
										{
											"key": "text",
											"value": "aliquip veniam do"
										},
										{
											"key": "categories",
											"value": "-70289167"
										},
										{
											"key": "categories",
											"value": "20327827"
										},
										{
											"key": "paid",
											"value": "true"
										},
										{
											"key": "rangeStart",
											"value": "aliquip veniam do"
										},
										{
											"key": "rangeEnd",
											"value": "aliquip veniam do"
										},
										{
											"key": "onlyAvailable",
											"value": "false"
										},
										{
											"key": "sort",
											"value": "EVENT_DATE"
										},
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "10"
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"CONFLICT\",\n  \"reason\": \"Integrity constraint has been violated\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:47:58\"\n}"
						},
						{
							"name": "Внутренняя ошибка сервера",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events?text=aliquip veniam do&categories=-70289167&categories=20327827&paid=true&rangeStart=aliquip veniam do&rangeEnd=aliquip veniam do&onlyAvailable=false&sort=EVENT_DATE&from=0&size=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events"
									],
									"query": [
										{
											"key": "text",
											"value": "aliquip veniam do"
										},
										{
											"key": "categories",
											"value": "-70289167"
										},
										{
											"key": "categories",
											"value": "20327827"
										},
										{
											"key": "paid",
											"value": "true"
										},
										{
											"key": "rangeStart",
											"value": "aliquip veniam do"
										},
										{
											"key": "rangeEnd",
											"value": "aliquip veniam do"
										},
										{
											"key": "onlyAvailable",
											"value": "false"
										},
										{
											"key": "sort",
											"value": "EVENT_DATE"
										},
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "10"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"INTERNAL_SERVER_ERROR\",\n  \"reason\": \"Error occurred\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:23:27\"\n}"
						}
					]
				},
				{
					"name": "Получение подробной информации об опубликованном событии по его идентификатору",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var body = {};\r",
									"let mail = \"email\" + pm.collectionVariables.get(\"usersCount\") + \"@gmail.com\";\r",
									"pm.collectionVariables.set(\"mail\", mail);\r",
									"pm.collectionVariables.set(\r",
									"  \"usersCount\",\r",
									"  pm.collectionVariables.get(\"usersCount\") + 1\r",
									");\r",
									"body = {\r",
									"  email: mail,\r",
									"  name: \"Usver\",\r",
									"};\r",
									"\r",
									"pm.sendRequest(\r",
									"  {\r",
									"    url: pm.collectionVariables.get(\"baseUrl\") + \"/admin/users\",\r",
									"    method: \"POST\",\r",
									"    body: JSON.stringify(body),\r",
									"    header: { \"Content-Type\": \"application/json\" },\r",
									"  },\r",
									"  (error, response) => {\r",
									"    if (error || (response.code >= 400 && response.code <= 599)) {\r",
									"      throw new Error(\r",
									"        \"Ошибка подготовки тестовых данных: \" + (error ? error : response.json)\r",
									"      );\r",
									"    }\r",
									"    pm.collectionVariables.set(\"response\", response.json());\r",
									"    pm.collectionVariables.set(\"uid\", response.json().id);\r",
									"    var body = {};\r",
									"    let name = \"name\" + pm.collectionVariables.get(\"usersCount\");\r",
									"    pm.collectionVariables.set(\"name\", name);\r",
									"    pm.collectionVariables.set(\r",
									"      \"usersCount\",\r",
									"      pm.collectionVariables.get(\"usersCount\") + 1\r",
									"    );\r",
									"    body = {\r",
									"      name: name,\r",
									"    };\r",
									"    pm.sendRequest(\r",
									"      {\r",
									"        url: pm.collectionVariables.get(\"baseUrl\") + \"/admin/categories\",\r",
									"        method: \"POST\",\r",
									"        body: JSON.stringify(body),\r",
									"        header: { \"Content-Type\": \"application/json\" },\r",
									"      },\r",
									"      (error, response) => {\r",
									"        if (error || (response.code >= 400 && response.code <= 599)) {\r",
									"          throw new Error(\r",
									"            \"Ошибка подготовки тестовых данных: \" +\r",
									"              (error ? error : response.json)\r",
									"          );\r",
									"        }\r",
									"        pm.collectionVariables.set(\"catid\", response.json().id);\r",
									"        body = {\r",
									"          annotation: \"annotationdasdadsadadasdsadsad\",\r",
									"          category: pm.collectionVariables.get(\"catid\"),\r",
									"          description: \"descriptiondsadadaddasdsadsad\",\r",
									"          eventDate: \"2095-09-06 13:30:38\",\r",
									"          location: {\r",
									"            lat: 10,\r",
									"            lon: 580,\r",
									"          },\r",
									"          paid: true,\r",
									"          participantLimit: 0,\r",
									"          requestModeration: true,\r",
									"          title: \"title\",\r",
									"        };\r",
									"        pm.collectionVariables.set(\"catname\", response.json().name);\r",
									"        pm.sendRequest(\r",
									"          {\r",
									"            url:\r",
									"              pm.collectionVariables.get(\"baseUrl\") +\r",
									"              \"/users/\" +\r",
									"              pm.collectionVariables.get(\"uid\") +\r",
									"              \"/events\",\r",
									"            method: \"POST\",\r",
									"            body: JSON.stringify(body),\r",
									"            header: { \"Content-Type\": \"application/json\" },\r",
									"          },\r",
									"          (error, response) => {\r",
									"            if (error || (response.code >= 400 && response.code <= 599)) {\r",
									"              throw new Error(\r",
									"                \"Ошибка подготовки тестовых данных: \" +\r",
									"                  (error ? error : response.json)\r",
									"              );\r",
									"            }\r",
									"            pm.collectionVariables.set(\"response\", response.json());\r",
									"            pm.collectionVariables.set(\"eid\", response.json().id);\r",
									"\r",
									"            pm.sendRequest(\r",
									"              {\r",
									"                url:\r",
									"                  pm.collectionVariables.get(\"baseUrl\") +\r",
									"                  \"/admin/events/\" +\r",
									"                  pm.collectionVariables.get(\"eid\") +\r",
									"                  \"/publish\",\r",
									"                method: \"PATCH\",\r",
									"              },\r",
									"              (error, response) => {\r",
									"                if (error || (response.code >= 400 && response.code <= 599)) {\r",
									"                  throw new Error(\r",
									"                    \"Ошибка подготовки тестовых данных: \" +\r",
									"                      (error ? error : response.json)\r",
									"                  );\r",
									"                }\r",
									"              }\r",
									"            );\r",
									"          }\r",
									"        );\r",
									"      }\r",
									"    );\r",
									"  }\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test event\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.annotation).to.eql(pm.collectionVariables.get('response').annotation);\r",
									"    pm.expect(jsonData.category.id).to.eql(pm.collectionVariables.get('catid'));\r",
									"    pm.expect(jsonData.description).to.eql(pm.collectionVariables.get('response').description);\r",
									"    pm.expect(jsonData.eventDate).to.eql(pm.collectionVariables.get('response').eventDate);\r",
									"    pm.expect(jsonData.initiator.id).to.eql(pm.collectionVariables.get('uid'));\r",
									"    pm.expect(jsonData.email).to.eql(pm.collectionVariables.get('response').email);\r",
									"    pm.expect(jsonData.title).to.eql(pm.collectionVariables.get('response').title);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/events/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{eid}}",
									"description": "(Required) id события"
								}
							]
						},
						"description": "Обратите внимание:\n- событие должно быть опубликовано\n- информация о событии должна включать в себя количество просмотров и количество подтвержденных запросов\n- информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики"
					},
					"response": [
						{
							"name": "Событие найдено",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "32652613",
											"description": "(Required) id события"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"annotation\": \"Эксклюзивность нашего шоу гарантирует привлечение максимальной зрительской аудитории\",\n  \"category\": {\n    \"name\": \"Концерты\",\n    \"id\": 1\n  },\n  \"initiator\": {\n    \"id\": 3,\n    \"name\": \"Фёдоров Матвей\"\n  },\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"title\": \"Знаменитое шоу \\\"Летающая кукуруза\\\"\",\n  \"confirmedRequests\": 5,\n  \"createdOn\": \"yyyy-MM-dd HH:mm:ss\",\n  \"description\": \"Что получится, если соединить кукурузу и полёт? Создатели \\\"Шоу летающей кукурузы\\\" испытали эту идею на практике и воплотили в жизнь инновационный проект, предлагающий свежий взгляд на развлечения...\",\n  \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n  \"id\": 1,\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"publishedOn\": \"yyyy-MM-dd HH:mm:ss\",\n  \"requestModeration\": true,\n  \"state\": \"PUBLISHED\",\n  \"views\": 999\n}"
						},
						{
							"name": "Запрос составлен с ошибкой",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "32652613",
											"description": "(Required) id события"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
						},
						{
							"name": "Не выполнены условия для совершения операции",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "32652613",
											"description": "(Required) id события"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
						},
						{
							"name": "Объект не найден",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "32652613",
											"description": "(Required) id события"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"NOT_FOUND\",\n  \"reason\": \"The required object was not found.\",\n  \"message\": \"Event with id=21 was not found.\",\n  \"timestamp\": \"2022-09-07 09:10:50\"\n}"
						},
						{
							"name": "Запрос приводит к нарушению целостности данных",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "32652613",
											"description": "(Required) id события"
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"CONFLICT\",\n  \"reason\": \"Integrity constraint has been violated\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:47:58\"\n}"
						},
						{
							"name": "Внутренняя ошибка сервера",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "32652613",
											"description": "(Required) id события"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"INTERNAL_SERVER_ERROR\",\n  \"reason\": \"Error occurred\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:23:27\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "users/{user Id}",
			"item": [
				{
					"name": "events",
					"item": [
						{
							"name": "{event Id}",
							"item": [
								{
									"name": "requests",
									"item": [
										{
											"name": "Получение информации о запросах на участие в событии текущего пользователя",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var body = {};\r",
															"let mail = \"email\" + pm.collectionVariables.get(\"usersCount\") + \"@yandex.ru\";\r",
															"pm.collectionVariables.set(\"mail\", mail);\r",
															"pm.collectionVariables.set(\"usersCount\", 1 + pm.collectionVariables.get(\"usersCount\"));\r",
															"body = {\r",
															"    email: mail,\r",
															"    name: \"Usver\",\r",
															"};\r",
															"\r",
															"pm.sendRequest(\r",
															"    {\r",
															"        url: pm.collectionVariables.get(\"baseUrl\") + \"/admin/users\",\r",
															"        method: \"POST\",\r",
															"        body: JSON.stringify(body),\r",
															"        header: { \"Content-Type\": \"application/json\" },\r",
															"    },\r",
															"    (error, response) => {\r",
															"        if(error || (response.code >= 400 && response.code <= 599)) {\r",
															"            throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
															"        }\r",
															"        pm.collectionVariables.set(\"response\", response.json());\r",
															"        pm.collectionVariables.set(\"uid\", parseInt(response.json().id));\r",
															"        pm.collectionVariables.set(\"uid1\", parseInt(response.json().id));\r",
															"        var body = {};\r",
															"        let name = \"name\" + pm.collectionVariables.get(\"usersCount\");\r",
															"        pm.collectionVariables.set(\"name\", name);\r",
															"        pm.collectionVariables.set(\"usersCount\", 1 + pm.collectionVariables.get(\"usersCount\"));\r",
															"        body = {\r",
															"            name: name,\r",
															"        };\r",
															"        pm.sendRequest(\r",
															"            {\r",
															"                url:\r",
															"                    pm.collectionVariables.get(\"baseUrl\") + \"/admin/categories\",\r",
															"                method: \"POST\",\r",
															"                body: JSON.stringify(body),\r",
															"                header: { \"Content-Type\": \"application/json\" },\r",
															"            },\r",
															"            (error, response) => {\r",
															"                if(error || (response.code >= 400 && response.code <= 599)) {\r",
															"                    throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
															"                }\r",
															"                pm.collectionVariables.set(\"catid\", response.json().id);\r",
															"                pm.collectionVariables.set(\"catname\", response.json().name);\r",
															"\r",
															"                body = {\r",
															"                    annotation: \"annotation169119129619612961691616161651651\",\r",
															"                    category: pm.collectionVariables.get(\"catid\"),\r",
															"                    description: \"description9498465165165161616516516516516\",\r",
															"                    eventDate: \"2095-09-06 13:30:38\",\r",
															"                    location: {\r",
															"                        lat: 10,\r",
															"                        lon: 580,\r",
															"                    },\r",
															"                    paid: true,\r",
															"                    participantLimit: 0,\r",
															"                    requestModeration: true,\r",
															"                    title: \"title\",\r",
															"                };\r",
															"                pm.sendRequest(\r",
															"                    {\r",
															"                        url:\r",
															"                            pm.collectionVariables.get(\"baseUrl\") +\r",
															"                            \"/users/\" +\r",
															"                            pm.collectionVariables.get(\"uid\") +\r",
															"                            \"/events\",\r",
															"                        method: \"POST\",\r",
															"                        body: JSON.stringify(body),\r",
															"                        header: { \"Content-Type\": \"application/json\" },\r",
															"                    },\r",
															"                    (error, response) => {\r",
															"                        if(error || (response.code >= 400 && response.code <= 599)) {\r",
															"                            throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
															"                        }\r",
															"                        pm.collectionVariables.set(\"eid\", response.json().id);\r",
															"                        pm.collectionVariables.set(\"response\", response.json());\r",
															"                        mail =\r",
															"                            \"email\" +\r",
															"                            pm.collectionVariables.get(\"usersCount\") +\r",
															"                            \"@yandex.ru\";\r",
															"                        pm.collectionVariables.set(\"mail\", mail);\r",
															"                        pm.collectionVariables.set(\r",
															"                            \"usersCount\",\r",
															"                            1 + pm.collectionVariables.get(\"usersCount\")\r",
															"                        );\r",
															"                        body = {\r",
															"                            email: mail,\r",
															"                            name: \"Usver\",\r",
															"                        };\r",
															"                        pm.sendRequest(\r",
															"                            {\r",
															"                                url:\r",
															"                                    pm.collectionVariables.get(\"baseUrl\") +\r",
															"                                    \"/admin/users\",\r",
															"                                method: \"POST\",\r",
															"                                body: JSON.stringify(body),\r",
															"                                header: { \"Content-Type\": \"application/json\" },\r",
															"                            },\r",
															"                            (error, response) => {\r",
															"                                if(error || (response.code >= 400 && response.code <= 599)) {\r",
															"                                    throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
															"                                }\r",
															"                                pm.collectionVariables.set(\"uid\", response.json().id);\r",
															"                                pm.sendRequest(\r",
															"                                    {\r",
															"                                        url:\r",
															"                                            pm.collectionVariables.get(\r",
															"                                                \"baseUrl\"\r",
															"                                            ) +\r",
															"                                            \"/admin/events/\" +\r",
															"                                            pm.collectionVariables.get(\"eid\") +\r",
															"                                            \"/publish\",\r",
															"                                        method: \"PATCH\",\r",
															"                                        body: JSON.stringify(body),\r",
															"                                        header: {\r",
															"                                            \"Content-Type\": \"application/json\",\r",
															"                                        },\r",
															"                                    },\r",
															"                                    (error, response) => {\r",
															"                                        if(error || (response.code >= 400 && response.code <= 599)) {\r",
															"                                            throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
															"                                        }\r",
															"                                        pm.sendRequest(\r",
															"                                            {\r",
															"                                                url:\r",
															"                                                    pm.collectionVariables.get(\r",
															"                                                        \"baseUrl\"\r",
															"                                                    ) +\r",
															"                                                    \"/users/\" +\r",
															"                                                    pm.collectionVariables.get(\"uid\") +\r",
															"                                                    \"/requests?eventId=\" + \r",
															"                                                    pm.collectionVariables.get(\"eid\"),\r",
															"                                                method: \"POST\",\r",
															"                                                body: JSON.stringify(body),\r",
															"                                                header: {\r",
															"                                                    \"Content-Type\": \"application/json\",\r",
															"                                                },\r",
															"                                            },\r",
															"                                            (error, response) => {\r",
															"                                                if(error || (response.code >= 400 && response.code <= 599)) {\r",
															"                                                    throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
															"                                                }\r",
															"                                                pm.collectionVariables.set('response', response.json());\r",
															"                                            }\r",
															"                                        );\r",
															"                                    }\r",
															"                                );\r",
															"                            }\r",
															"                        );\r",
															"                    }\r",
															"                );\r",
															"            }\r",
															"        );\r",
															"    }\r",
															");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Test event\", function () {\r",
															"    var jsonData = pm.response.json()[0];\r",
															"    pm.expect(jsonData).to.eql(pm.collectionVariables.get('response'));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/events/:eventId/requests",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"events",
														":eventId",
														"requests"
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{uid1}}",
															"description": "(Required) id текущего пользователя"
														},
														{
															"key": "eventId",
															"value": "{{eid}}",
															"description": "(Required) id события"
														}
													]
												}
											},
											"response": [
												{
													"name": "Найдены запросы на участие",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/users/:userId/events/:eventId/requests",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"events",
																":eventId",
																"requests"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "32652613",
																	"description": "(Required) id текущего пользователя"
																},
																{
																	"key": "eventId",
																	"value": "32652613",
																	"description": "(Required) id события"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"created\": \"1963-08-11T07:29:21.024Z\",\n    \"event\": 1,\n    \"id\": 3,\n    \"requester\": 2,\n    \"status\": \"PENDING\"\n  },\n  {\n    \"created\": \"1995-09-06T16:03:26.967Z\",\n    \"event\": 1,\n    \"id\": 3,\n    \"requester\": 2,\n    \"status\": \"PENDING\"\n  }\n]"
												},
												{
													"name": "Запрос составлен с ошибкой",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/users/:userId/events/:eventId/requests",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"events",
																":eventId",
																"requests"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "32652613",
																	"description": "(Required) id текущего пользователя"
																},
																{
																	"key": "eventId",
																	"value": "32652613",
																	"description": "(Required) id события"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
												},
												{
													"name": "Не выполнены условия для совершения операции",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/users/:userId/events/:eventId/requests",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"events",
																":eventId",
																"requests"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "32652613",
																	"description": "(Required) id текущего пользователя"
																},
																{
																	"key": "eventId",
																	"value": "32652613",
																	"description": "(Required) id события"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
												},
												{
													"name": "Объект не найден",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/users/:userId/events/:eventId/requests",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"events",
																":eventId",
																"requests"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "32652613",
																	"description": "(Required) id текущего пользователя"
																},
																{
																	"key": "eventId",
																	"value": "32652613",
																	"description": "(Required) id события"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"status\": \"NOT_FOUND\",\n  \"reason\": \"The required object was not found.\",\n  \"message\": \"Event with id=21 was not found.\",\n  \"timestamp\": \"2022-09-07 09:10:50\"\n}"
												},
												{
													"name": "Запрос приводит к нарушению целостности данных",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/users/:userId/events/:eventId/requests",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"events",
																":eventId",
																"requests"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "32652613",
																	"description": "(Required) id текущего пользователя"
																},
																{
																	"key": "eventId",
																	"value": "32652613",
																	"description": "(Required) id события"
																}
															]
														}
													},
													"status": "Conflict",
													"code": 409,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"status\": \"CONFLICT\",\n  \"reason\": \"Integrity constraint has been violated\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:47:58\"\n}"
												},
												{
													"name": "Внутренняя ошибка сервера",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/users/:userId/events/:eventId/requests",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"events",
																":eventId",
																"requests"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "32652613",
																	"description": "(Required) id текущего пользователя"
																},
																{
																	"key": "eventId",
																	"value": "32652613",
																	"description": "(Required) id события"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"status\": \"INTERNAL_SERVER_ERROR\",\n  \"reason\": \"Error occurred\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:23:27\"\n}"
												}
											]
										},
										{
											"name": "Подтверждение чужой заявки на участие в событии текущего пользователя",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var body = {};\r",
															"let mail = \"email\" + pm.collectionVariables.get(\"usersCount\") + \"@yandex.ru\";\r",
															"pm.collectionVariables.set(\"mail\", mail);\r",
															"pm.collectionVariables.set(\"usersCount\", 1 + pm.collectionVariables.get(\"usersCount\"));\r",
															"body = {\r",
															"    email: mail,\r",
															"    name: \"Usver\",\r",
															"};\r",
															"\r",
															"pm.sendRequest(\r",
															"    {\r",
															"        url: pm.collectionVariables.get(\"baseUrl\") + \"/admin/users\",\r",
															"        method: \"POST\",\r",
															"        body: JSON.stringify(body),\r",
															"        header: { \"Content-Type\": \"application/json\" },\r",
															"    },\r",
															"    (error, response) => {\r",
															"        if(error || (response.code >= 400 && response.code <= 599)) {\r",
															"            throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
															"        }\r",
															"        pm.collectionVariables.set(\"response\", response.json());\r",
															"        pm.collectionVariables.set(\"uid\", parseInt(response.json().id));\r",
															"        pm.collectionVariables.set(\"uid1\", parseInt(response.json().id));\r",
															"        var body = {};\r",
															"        let name = \"name\" + pm.collectionVariables.get(\"usersCount\");\r",
															"        pm.collectionVariables.set(\"name\", name);\r",
															"        pm.collectionVariables.set(\"usersCount\", 1 + pm.collectionVariables.get(\"usersCount\"));\r",
															"        body = {\r",
															"            name: name,\r",
															"        };\r",
															"        pm.sendRequest(\r",
															"            {\r",
															"                url:\r",
															"                    pm.collectionVariables.get(\"baseUrl\") + \"/admin/categories\",\r",
															"                method: \"POST\",\r",
															"                body: JSON.stringify(body),\r",
															"                header: { \"Content-Type\": \"application/json\" },\r",
															"            },\r",
															"            (error, response) => {\r",
															"                if(error || (response.code >= 400 && response.code <= 599)) {\r",
															"                    throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
															"                }\r",
															"                pm.collectionVariables.set(\"catid\", response.json().id);\r",
															"                pm.collectionVariables.set(\"catname\", response.json().name);\r",
															"\r",
															"                body = {\r",
															"                    annotation: \"annotation169119129619612961691616161651651\",\r",
															"                    category: pm.collectionVariables.get(\"catid\"),\r",
															"                    description: \"description9498465165165161616516516516516\",\r",
															"                    eventDate: \"2095-09-06 13:30:38\",\r",
															"                    location: {\r",
															"                        lat: 10,\r",
															"                        lon: 580,\r",
															"                    },\r",
															"                    paid: true,\r",
															"                    participantLimit: 5,\r",
															"                    requestModeration: true,\r",
															"                    title: \"title\",\r",
															"                };\r",
															"                pm.sendRequest(\r",
															"                    {\r",
															"                        url:\r",
															"                            pm.collectionVariables.get(\"baseUrl\") +\r",
															"                            \"/users/\" +\r",
															"                            pm.collectionVariables.get(\"uid\") +\r",
															"                            \"/events\",\r",
															"                        method: \"POST\",\r",
															"                        body: JSON.stringify(body),\r",
															"                        header: { \"Content-Type\": \"application/json\" },\r",
															"                    },\r",
															"                    (error, response) => {\r",
															"                         if(error || (response.code >= 400 && response.code <= 599)) {\r",
															"                             throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
															"                        }\r",
															"                        pm.collectionVariables.set(\"eid\", response.json().id);\r",
															"                        pm.collectionVariables.set(\"response\", response.json());\r",
															"                        mail =\r",
															"                            \"email\" +\r",
															"                            pm.collectionVariables.get(\"usersCount\") +\r",
															"                            \"@yandex.ru\";\r",
															"                        pm.collectionVariables.set(\"mail\", mail);\r",
															"                        pm.collectionVariables.set(\r",
															"                            \"usersCount\",\r",
															"                            1 + pm.collectionVariables.get(\"usersCount\")\r",
															"                        );\r",
															"                        body = {\r",
															"                            email: mail,\r",
															"                            name: \"Usver\",\r",
															"                        };\r",
															"                        pm.sendRequest(\r",
															"                            {\r",
															"                                url:\r",
															"                                    pm.collectionVariables.get(\"baseUrl\") +\r",
															"                                    \"/admin/users\",\r",
															"                                method: \"POST\",\r",
															"                                body: JSON.stringify(body),\r",
															"                                header: { \"Content-Type\": \"application/json\" },\r",
															"                            },\r",
															"                            (error, response) => {\r",
															"                                if(error || (response.code >= 400 && response.code <= 599)) {\r",
															"                                    throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
															"                                }\r",
															"                                pm.collectionVariables.set(\"uid\", response.json().id);\r",
															"                                pm.sendRequest(\r",
															"                                    {\r",
															"                                        url:\r",
															"                                            pm.collectionVariables.get(\r",
															"                                                \"baseUrl\"\r",
															"                                            ) +\r",
															"                                            \"/admin/events/\" +\r",
															"                                            pm.collectionVariables.get(\"eid\") +\r",
															"                                            \"/publish\",\r",
															"                                        method: \"PATCH\",\r",
															"                                        body: JSON.stringify(body),\r",
															"                                        header: {\r",
															"                                            \"Content-Type\": \"application/json\",\r",
															"                                        },\r",
															"                                    },\r",
															"                                    (error, response) => {\r",
															"                                        if(error || (response.code >= 400 && response.code <= 599)) {\r",
															"                                            throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
															"                                        }\r",
															"                                        pm.sendRequest(\r",
															"                                            {\r",
															"                                                url:\r",
															"                                                    pm.collectionVariables.get(\r",
															"                                                        \"baseUrl\"\r",
															"                                                    ) +\r",
															"                                                    \"/users/\" +\r",
															"                                                    pm.collectionVariables.get(\"uid\") +\r",
															"                                                    \"/requests?eventId=\" + \r",
															"                                                    pm.collectionVariables.get(\"eid\"),\r",
															"                                                method: \"POST\",\r",
															"                                                body: JSON.stringify(body),\r",
															"                                                header: {\r",
															"                                                    \"Content-Type\": \"application/json\",\r",
															"                                                },\r",
															"                                            },\r",
															"                                            (error, response) => {\r",
															"                                                if(error || (response.code >= 400 && response.code <= 599)) {\r",
															"                                                    throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
															"                                                }\r",
															"                                                pm.collectionVariables.set('reqid', response.json().id);\r",
															"                                                pm.collectionVariables.set('response', response.json());\r",
															"                                            }\r",
															"                                        );\r",
															"                                    }\r",
															"                                );\r",
															"                            }\r",
															"                        );\r",
															"                    }\r",
															"                );\r",
															"            }\r",
															"        );\r",
															"    }\r",
															");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Test cancel\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.status).to.eql(\"CONFIRMED\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/events/:eventId/requests/:reqId/confirm",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"events",
														":eventId",
														"requests",
														":reqId",
														"confirm"
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{uid1}}",
															"description": "(Required) id текущего пользователя"
														},
														{
															"key": "eventId",
															"value": "{{eid}}",
															"description": "(Required) id события текущего пользователя"
														},
														{
															"key": "reqId",
															"value": "{{reqid}}",
															"description": "(Required) id заявки, которую подтверждает текущий пользователь"
														}
													]
												},
												"description": "Обратите внимание:\n- нельзя подтвердить заявку, если уже достигнут лимит по заявкам на данное событие\n- если при подтверждении данной заявки, лимит заявок для события исчерпан, то все неподтверждённые заявки необходимо отклонить"
											},
											"response": [
												{
													"name": "Заявка подтверждена",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/users/:userId/events/:eventId/requests/:reqId/confirm",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"events",
																":eventId",
																"requests",
																":reqId",
																"confirm"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "32652613",
																	"description": "(Required) id текущего пользователя"
																},
																{
																	"key": "eventId",
																	"value": "32652613",
																	"description": "(Required) id события текущего пользователя"
																},
																{
																	"key": "reqId",
																	"value": "32652613",
																	"description": "(Required) id заявки, которую подтверждает текущий пользователь"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"created\": \"1969-01-16T10:39:34.967Z\",\n  \"event\": 1,\n  \"id\": 3,\n  \"requester\": 2,\n  \"status\": \"PENDING\"\n}"
												},
												{
													"name": "Запрос составлен с ошибкой",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/users/:userId/events/:eventId/requests/:reqId/confirm",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"events",
																":eventId",
																"requests",
																":reqId",
																"confirm"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "32652613",
																	"description": "(Required) id текущего пользователя"
																},
																{
																	"key": "eventId",
																	"value": "32652613",
																	"description": "(Required) id события текущего пользователя"
																},
																{
																	"key": "reqId",
																	"value": "32652613",
																	"description": "(Required) id заявки, которую подтверждает текущий пользователь"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
												},
												{
													"name": "Не выполнены условия для совершения операции",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/users/:userId/events/:eventId/requests/:reqId/confirm",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"events",
																":eventId",
																"requests",
																":reqId",
																"confirm"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "32652613",
																	"description": "(Required) id текущего пользователя"
																},
																{
																	"key": "eventId",
																	"value": "32652613",
																	"description": "(Required) id события текущего пользователя"
																},
																{
																	"key": "reqId",
																	"value": "32652613",
																	"description": "(Required) id заявки, которую подтверждает текущий пользователь"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
												},
												{
													"name": "Объект не найден",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/users/:userId/events/:eventId/requests/:reqId/confirm",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"events",
																":eventId",
																"requests",
																":reqId",
																"confirm"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "32652613",
																	"description": "(Required) id текущего пользователя"
																},
																{
																	"key": "eventId",
																	"value": "32652613",
																	"description": "(Required) id события текущего пользователя"
																},
																{
																	"key": "reqId",
																	"value": "32652613",
																	"description": "(Required) id заявки, которую подтверждает текущий пользователь"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"status\": \"NOT_FOUND\",\n  \"reason\": \"The required object was not found.\",\n  \"message\": \"Event with id=21 was not found.\",\n  \"timestamp\": \"2022-09-07 09:10:50\"\n}"
												},
												{
													"name": "Запрос приводит к нарушению целостности данных",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/users/:userId/events/:eventId/requests/:reqId/confirm",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"events",
																":eventId",
																"requests",
																":reqId",
																"confirm"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "32652613",
																	"description": "(Required) id текущего пользователя"
																},
																{
																	"key": "eventId",
																	"value": "32652613",
																	"description": "(Required) id события текущего пользователя"
																},
																{
																	"key": "reqId",
																	"value": "32652613",
																	"description": "(Required) id заявки, которую подтверждает текущий пользователь"
																}
															]
														}
													},
													"status": "Conflict",
													"code": 409,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"status\": \"CONFLICT\",\n  \"reason\": \"Integrity constraint has been violated\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:47:58\"\n}"
												},
												{
													"name": "Внутренняя ошибка сервера",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/users/:userId/events/:eventId/requests/:reqId/confirm",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"events",
																":eventId",
																"requests",
																":reqId",
																"confirm"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "32652613",
																	"description": "(Required) id текущего пользователя"
																},
																{
																	"key": "eventId",
																	"value": "32652613",
																	"description": "(Required) id события текущего пользователя"
																},
																{
																	"key": "reqId",
																	"value": "32652613",
																	"description": "(Required) id заявки, которую подтверждает текущий пользователь"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"status\": \"INTERNAL_SERVER_ERROR\",\n  \"reason\": \"Error occurred\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:23:27\"\n}"
												}
											]
										},
										{
											"name": "Отклонение чужой заявки на участие в событии текущего пользователя",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Test cancel\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.status).to.eql(\"REJECTED\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var body = {};\r",
															"let mail = \"email\" + pm.collectionVariables.get(\"usersCount\") + \"@yandex.ru\";\r",
															"pm.collectionVariables.set(\"mail\", mail);\r",
															"pm.collectionVariables.set(\"usersCount\", 1 + pm.collectionVariables.get(\"usersCount\"));\r",
															"body = {\r",
															"    email: mail,\r",
															"    name: \"Usver\",\r",
															"};\r",
															"\r",
															"pm.sendRequest(\r",
															"    {\r",
															"        url: pm.collectionVariables.get(\"baseUrl\") + \"/admin/users\",\r",
															"        method: \"POST\",\r",
															"        body: JSON.stringify(body),\r",
															"        header: { \"Content-Type\": \"application/json\" },\r",
															"    },\r",
															"    (error, response) => {\r",
															"        if(error || (response.code >= 400 && response.code <= 599)) {\r",
															"            throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
															"        }\r",
															"        pm.collectionVariables.set(\"response\", response.json());\r",
															"        pm.collectionVariables.set(\"uid\", parseInt(response.json().id));\r",
															"        pm.collectionVariables.set(\"uid1\", parseInt(response.json().id));\r",
															"        var body = {};\r",
															"        let name = \"name\" + pm.collectionVariables.get(\"usersCount\");\r",
															"        pm.collectionVariables.set(\"name\", name);\r",
															"        pm.collectionVariables.set(\"usersCount\", 1 + pm.collectionVariables.get(\"usersCount\"));\r",
															"        body = {\r",
															"            name: name,\r",
															"        };\r",
															"        pm.sendRequest(\r",
															"            {\r",
															"                url:\r",
															"                    pm.collectionVariables.get(\"baseUrl\") + \"/admin/categories\",\r",
															"                method: \"POST\",\r",
															"                body: JSON.stringify(body),\r",
															"                header: { \"Content-Type\": \"application/json\" },\r",
															"            },\r",
															"            (error, response) => {\r",
															"                if(error || (response.code >= 400 && response.code <= 599)) {\r",
															"                    throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
															"                }\r",
															"                pm.collectionVariables.set(\"catid\", response.json().id);\r",
															"                pm.collectionVariables.set(\"catname\", response.json().name);\r",
															"\r",
															"                body = {\r",
															"                    annotation: \"annotation169119129619612961691616161651651\",\r",
															"                    category: pm.collectionVariables.get(\"catid\"),\r",
															"                    description: \"description9498465165165161616516516516516\",\r",
															"                    eventDate: \"2095-09-06 13:30:38\",\r",
															"                    location: {\r",
															"                        lat: 10,\r",
															"                        lon: 580,\r",
															"                    },\r",
															"                    paid: true,\r",
															"                    participantLimit: 5,\r",
															"                    requestModeration: true,\r",
															"                    title: \"title\",\r",
															"                };\r",
															"                pm.sendRequest(\r",
															"                    {\r",
															"                        url:\r",
															"                            pm.collectionVariables.get(\"baseUrl\") +\r",
															"                            \"/users/\" +\r",
															"                            pm.collectionVariables.get(\"uid\") +\r",
															"                            \"/events\",\r",
															"                        method: \"POST\",\r",
															"                        body: JSON.stringify(body),\r",
															"                        header: { \"Content-Type\": \"application/json\" },\r",
															"                    },\r",
															"                    (error, response) => {\r",
															"                         if(error || (response.code >= 400 && response.code <= 599)) {\r",
															"                             throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
															"                        }\r",
															"                        pm.collectionVariables.set(\"eid\", response.json().id);\r",
															"                        pm.collectionVariables.set(\"response\", response.json());\r",
															"                        mail =\r",
															"                            \"email\" +\r",
															"                            pm.collectionVariables.get(\"usersCount\") +\r",
															"                            \"@yandex.ru\";\r",
															"                        pm.collectionVariables.set(\"mail\", mail);\r",
															"                        pm.collectionVariables.set(\r",
															"                            \"usersCount\",\r",
															"                            1 + pm.collectionVariables.get(\"usersCount\")\r",
															"                        );\r",
															"                        body = {\r",
															"                            email: mail,\r",
															"                            name: \"Usver\",\r",
															"                        };\r",
															"                        pm.sendRequest(\r",
															"                            {\r",
															"                                url:\r",
															"                                    pm.collectionVariables.get(\"baseUrl\") +\r",
															"                                    \"/admin/users\",\r",
															"                                method: \"POST\",\r",
															"                                body: JSON.stringify(body),\r",
															"                                header: { \"Content-Type\": \"application/json\" },\r",
															"                            },\r",
															"                            (error, response) => {\r",
															"                                if(error || (response.code >= 400 && response.code <= 599)) {\r",
															"                                    throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
															"                                }\r",
															"                                pm.collectionVariables.set(\"uid\", response.json().id);\r",
															"                                pm.sendRequest(\r",
															"                                    {\r",
															"                                        url:\r",
															"                                            pm.collectionVariables.get(\r",
															"                                                \"baseUrl\"\r",
															"                                            ) +\r",
															"                                            \"/admin/events/\" +\r",
															"                                            pm.collectionVariables.get(\"eid\") +\r",
															"                                            \"/publish\",\r",
															"                                        method: \"PATCH\",\r",
															"                                        body: JSON.stringify(body),\r",
															"                                        header: {\r",
															"                                            \"Content-Type\": \"application/json\",\r",
															"                                        },\r",
															"                                    },\r",
															"                                    (error, response) => {\r",
															"                                        if(error || (response.code >= 400 && response.code <= 599)) {\r",
															"                                            throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
															"                                        }\r",
															"                                        pm.sendRequest(\r",
															"                                            {\r",
															"                                                url:\r",
															"                                                    pm.collectionVariables.get(\r",
															"                                                        \"baseUrl\"\r",
															"                                                    ) +\r",
															"                                                    \"/users/\" +\r",
															"                                                    pm.collectionVariables.get(\"uid\") +\r",
															"                                                    \"/requests?eventId=\" + \r",
															"                                                    pm.collectionVariables.get(\"eid\"),\r",
															"                                                method: \"POST\",\r",
															"                                                body: JSON.stringify(body),\r",
															"                                                header: {\r",
															"                                                    \"Content-Type\": \"application/json\",\r",
															"                                                },\r",
															"                                            },\r",
															"                                            (error, response) => {\r",
															"                                                if(error || (response.code >= 400 && response.code <= 599)) {\r",
															"                                                    throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
															"                                                }\r",
															"                                                pm.collectionVariables.set('reqid', response.json().id);\r",
															"                                                pm.collectionVariables.set('response', response.json());\r",
															"                                            }\r",
															"                                        );\r",
															"                                    }\r",
															"                                );\r",
															"                            }\r",
															"                        );\r",
															"                    }\r",
															"                );\r",
															"            }\r",
															"        );\r",
															"    }\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/events/:eventId/requests/:reqId/reject",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"events",
														":eventId",
														"requests",
														":reqId",
														"reject"
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{uid1}}",
															"description": "(Required) id текущего пользователя"
														},
														{
															"key": "eventId",
															"value": "{{eid}}",
															"description": "(Required) id события текущего пользователя"
														},
														{
															"key": "reqId",
															"value": "{{reqid}}",
															"description": "(Required) id заявки, которую отменяет текущий пользователь"
														}
													]
												}
											},
											"response": [
												{
													"name": "Заявка отклонена",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/users/:userId/events/:eventId/requests/:reqId/reject",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"events",
																":eventId",
																"requests",
																":reqId",
																"reject"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "32652613",
																	"description": "(Required) id текущего пользователя"
																},
																{
																	"key": "eventId",
																	"value": "32652613",
																	"description": "(Required) id события текущего пользователя"
																},
																{
																	"key": "reqId",
																	"value": "32652613",
																	"description": "(Required) id заявки, которую отменяет текущий пользователь"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"created\": \"1969-01-16T10:39:34.967Z\",\n  \"event\": 1,\n  \"id\": 3,\n  \"requester\": 2,\n  \"status\": \"PENDING\"\n}"
												},
												{
													"name": "Запрос составлен с ошибкой",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/users/:userId/events/:eventId/requests/:reqId/reject",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"events",
																":eventId",
																"requests",
																":reqId",
																"reject"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "32652613",
																	"description": "(Required) id текущего пользователя"
																},
																{
																	"key": "eventId",
																	"value": "32652613",
																	"description": "(Required) id события текущего пользователя"
																},
																{
																	"key": "reqId",
																	"value": "32652613",
																	"description": "(Required) id заявки, которую отменяет текущий пользователь"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
												},
												{
													"name": "Не выполнены условия для совершения операции",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/users/:userId/events/:eventId/requests/:reqId/reject",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"events",
																":eventId",
																"requests",
																":reqId",
																"reject"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "32652613",
																	"description": "(Required) id текущего пользователя"
																},
																{
																	"key": "eventId",
																	"value": "32652613",
																	"description": "(Required) id события текущего пользователя"
																},
																{
																	"key": "reqId",
																	"value": "32652613",
																	"description": "(Required) id заявки, которую отменяет текущий пользователь"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
												},
												{
													"name": "Объект не найден",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/users/:userId/events/:eventId/requests/:reqId/reject",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"events",
																":eventId",
																"requests",
																":reqId",
																"reject"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "32652613",
																	"description": "(Required) id текущего пользователя"
																},
																{
																	"key": "eventId",
																	"value": "32652613",
																	"description": "(Required) id события текущего пользователя"
																},
																{
																	"key": "reqId",
																	"value": "32652613",
																	"description": "(Required) id заявки, которую отменяет текущий пользователь"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"status\": \"NOT_FOUND\",\n  \"reason\": \"The required object was not found.\",\n  \"message\": \"Event with id=21 was not found.\",\n  \"timestamp\": \"2022-09-07 09:10:50\"\n}"
												},
												{
													"name": "Запрос приводит к нарушению целостности данных",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/users/:userId/events/:eventId/requests/:reqId/reject",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"events",
																":eventId",
																"requests",
																":reqId",
																"reject"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "32652613",
																	"description": "(Required) id текущего пользователя"
																},
																{
																	"key": "eventId",
																	"value": "32652613",
																	"description": "(Required) id события текущего пользователя"
																},
																{
																	"key": "reqId",
																	"value": "32652613",
																	"description": "(Required) id заявки, которую отменяет текущий пользователь"
																}
															]
														}
													},
													"status": "Conflict",
													"code": 409,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"status\": \"CONFLICT\",\n  \"reason\": \"Integrity constraint has been violated\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:47:58\"\n}"
												},
												{
													"name": "Внутренняя ошибка сервера",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/users/:userId/events/:eventId/requests/:reqId/reject",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"events",
																":eventId",
																"requests",
																":reqId",
																"reject"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "32652613",
																	"description": "(Required) id текущего пользователя"
																},
																{
																	"key": "eventId",
																	"value": "32652613",
																	"description": "(Required) id события текущего пользователя"
																},
																{
																	"key": "reqId",
																	"value": "32652613",
																	"description": "(Required) id заявки, которую отменяет текущий пользователь"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"status\": \"INTERNAL_SERVER_ERROR\",\n  \"reason\": \"Error occurred\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:23:27\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "Получение полной информации о событии добавленном текущим пользователем",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var body = {};\r",
													"let mail = 'email' + pm.collectionVariables.get(\"usersCount\") + '@yandex.ru';\r",
													"pm.collectionVariables.set('mail', mail)\r",
													"pm.collectionVariables.set(\"usersCount\", 1 + pm.collectionVariables.get(\"usersCount\"))\r",
													"body = {\r",
													"    'email': mail,\r",
													"    'name': 'Usver'\r",
													"};\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"baseUrl\") + '/admin/users',\r",
													"    method: 'POST',\r",
													"    body: JSON.stringify(body),\r",
													"    header: {'Content-Type': 'application/json'}\r",
													"    }, (error, response) => {\r",
													"        if(error || (response.code >= 400 && response.code <= 599)) {\r",
													"            throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
													"        }\r",
													"        pm.collectionVariables.set('response', response.json())\r",
													"        pm.collectionVariables.set('uid', parseInt(response.json().id))\r",
													"        var body = {};\r",
													"        let name = 'name' + pm.collectionVariables.get(\"usersCount\");\r",
													"        pm.collectionVariables.set('name', name)\r",
													"        pm.collectionVariables.set(\"usersCount\", 1 + pm.collectionVariables.get(\"usersCount\"))\r",
													"        body = {\r",
													"            'name': name\r",
													"        };\r",
													"        pm.sendRequest({\r",
													"            url: pm.collectionVariables.get(\"baseUrl\") + '/admin/categories',\r",
													"            method: 'POST',\r",
													"            body: JSON.stringify(body),\r",
													"            header: {'Content-Type': 'application/json'}\r",
													"            }, (error, response) => {\r",
													"                if(error || (response.code >= 400 && response.code <= 599)) {\r",
													"                    throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
													"                }\r",
													"                pm.collectionVariables.set('catid', response.json().id);\r",
													"                pm.collectionVariables.set('catname', response.json().name)\r",
													"               \r",
													"                    body = {\r",
													"                        \"annotation\": \"annotation169119129619612961691616161651651\",\r",
													"                        \"category\": pm.collectionVariables.get('catid'),\r",
													"                        \"description\": \"description9498465165165161616516516516516\",\r",
													"                        \"eventDate\": \"2095-09-06 13:30:38\",\r",
													"                        \"location\": {\r",
													"                            \"lat\": 10,\r",
													"                            \"lon\": 580\r",
													"                        },\r",
													"                        \"paid\": true,\r",
													"                        \"participantLimit\": 0,\r",
													"                        \"requestModeration\": true,\r",
													"                        \"title\": \"title\"\r",
													"                    };\r",
													"                    pm.sendRequest({\r",
													"                        url: pm.collectionVariables.get(\"baseUrl\") + '/users/' + pm.collectionVariables.get('uid') + '/events',\r",
													"                        method: 'POST',\r",
													"                        body: JSON.stringify(body),\r",
													"                        header: {'Content-Type': 'application/json'}\r",
													"                    }, (error, response) => {\r",
													"                        if(error || (response.code >= 400 && response.code <= 599)) {\r",
													"                            throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
													"                        }\r",
													"                        pm.collectionVariables.set('eid', response.json().id);\r",
													"                        pm.collectionVariables.set('response', response.json());\r",
													"                    });\r",
													"                });\r",
													"            });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Test event\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.annotation).to.eql(pm.collectionVariables.get('response').annotation);\r",
													"    pm.expect(jsonData.category.id).to.eql(pm.collectionVariables.get('response').category.id);\r",
													"    pm.expect(jsonData.eventDate).to.eql(pm.collectionVariables.get('response').eventDate);\r",
													"    pm.expect(jsonData.initiator.id).to.eql(pm.collectionVariables.get('uid'));\r",
													"    pm.expect(jsonData.email).to.eql(pm.collectionVariables.get('response').email);\r",
													"    pm.expect(jsonData.title).to.eql(pm.collectionVariables.get('response').title);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events/:eventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events",
												":eventId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{uid}}",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "eventId",
													"value": "{{eid}}",
													"description": "(Required) id события"
												}
											]
										}
									},
									"response": [
										{
											"name": "Событие найдено",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/events/:eventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"events",
														":eventId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "32652613",
															"description": "(Required) id текущего пользователя"
														},
														{
															"key": "eventId",
															"value": "32652613",
															"description": "(Required) id события"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"annotation\": \"Эксклюзивность нашего шоу гарантирует привлечение максимальной зрительской аудитории\",\n  \"category\": {\n    \"name\": \"Концерты\",\n    \"id\": 1\n  },\n  \"initiator\": {\n    \"id\": 3,\n    \"name\": \"Фёдоров Матвей\"\n  },\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"title\": \"Знаменитое шоу \\\"Летающая кукуруза\\\"\",\n  \"confirmedRequests\": 5,\n  \"createdOn\": \"yyyy-MM-dd HH:mm:ss\",\n  \"description\": \"Что получится, если соединить кукурузу и полёт? Создатели \\\"Шоу летающей кукурузы\\\" испытали эту идею на практике и воплотили в жизнь инновационный проект, предлагающий свежий взгляд на развлечения...\",\n  \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n  \"id\": 1,\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"publishedOn\": \"yyyy-MM-dd HH:mm:ss\",\n  \"requestModeration\": true,\n  \"state\": \"PUBLISHED\",\n  \"views\": 999\n}"
										},
										{
											"name": "Запрос составлен с ошибкой",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/events/:eventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"events",
														":eventId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "32652613",
															"description": "(Required) id текущего пользователя"
														},
														{
															"key": "eventId",
															"value": "32652613",
															"description": "(Required) id события"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
										},
										{
											"name": "Не выполнены условия для совершения операции",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/events/:eventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"events",
														":eventId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "32652613",
															"description": "(Required) id текущего пользователя"
														},
														{
															"key": "eventId",
															"value": "32652613",
															"description": "(Required) id события"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
										},
										{
											"name": "Объект не найден",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/events/:eventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"events",
														":eventId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "32652613",
															"description": "(Required) id текущего пользователя"
														},
														{
															"key": "eventId",
															"value": "32652613",
															"description": "(Required) id события"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"status\": \"NOT_FOUND\",\n  \"reason\": \"The required object was not found.\",\n  \"message\": \"Event with id=21 was not found.\",\n  \"timestamp\": \"2022-09-07 09:10:50\"\n}"
										},
										{
											"name": "Запрос приводит к нарушению целостности данных",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/events/:eventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"events",
														":eventId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "32652613",
															"description": "(Required) id текущего пользователя"
														},
														{
															"key": "eventId",
															"value": "32652613",
															"description": "(Required) id события"
														}
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"status\": \"CONFLICT\",\n  \"reason\": \"Integrity constraint has been violated\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:47:58\"\n}"
										},
										{
											"name": "Внутренняя ошибка сервера",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/events/:eventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"events",
														":eventId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "32652613",
															"description": "(Required) id текущего пользователя"
														},
														{
															"key": "eventId",
															"value": "32652613",
															"description": "(Required) id события"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"status\": \"INTERNAL_SERVER_ERROR\",\n  \"reason\": \"Error occurred\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:23:27\"\n}"
										}
									]
								},
								{
									"name": "Отмена события добавленного текущим пользователем.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var body = {};\r",
													"let mail = 'email' + pm.collectionVariables.get(\"usersCount\") + '@yandex.ru';\r",
													"pm.collectionVariables.set('mail', mail)\r",
													"pm.collectionVariables.set(\"usersCount\", 1 + pm.collectionVariables.get(\"usersCount\"))\r",
													"body = {\r",
													"    'email': mail,\r",
													"    'name': 'Usver'\r",
													"};\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"baseUrl\") + '/admin/users',\r",
													"    method: 'POST',\r",
													"    body: JSON.stringify(body),\r",
													"    header: {'Content-Type': 'application/json'}\r",
													"    }, (error, response) => {\r",
													"        if(error || (response.code >= 400 && response.code <= 599)) {\r",
													"            throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
													"        }\r",
													"        pm.collectionVariables.set('response', response.json())\r",
													"        pm.collectionVariables.set('uid', parseInt(response.json().id))\r",
													"        var body = {};\r",
													"        let name = 'name' + pm.collectionVariables.get(\"usersCount\");\r",
													"        pm.collectionVariables.set('name', name)\r",
													"        pm.collectionVariables.set(\"usersCount\", 1 + pm.collectionVariables.get(\"usersCount\"))\r",
													"        body = {\r",
													"            'name': name\r",
													"        };\r",
													"        pm.sendRequest({\r",
													"            url: pm.collectionVariables.get(\"baseUrl\") + '/admin/categories',\r",
													"            method: 'POST',\r",
													"            body: JSON.stringify(body),\r",
													"            header: {'Content-Type': 'application/json'}\r",
													"            }, (error, response) => {\r",
													"                if(error || (response.code >= 400 && response.code <= 599)) {\r",
													"                    throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
													"                }\r",
													"                pm.collectionVariables.set('catid', response.json().id);\r",
													"                pm.collectionVariables.set('catname', response.json().name)\r",
													"               \r",
													"                    body = {\r",
													"                        \"annotation\": \"annotation169119129619612961691616161651651\",\r",
													"                        \"category\": pm.collectionVariables.get('catid'),\r",
													"                        \"description\": \"description9498465165165161616516516516516\",\r",
													"                        \"eventDate\": \"2095-09-06 13:30:38\",\r",
													"                        \"location\": {\r",
													"                            \"lat\": 10,\r",
													"                            \"lon\": 580\r",
													"                        },\r",
													"                        \"paid\": true,\r",
													"                        \"participantLimit\": 0,\r",
													"                        \"requestModeration\": true,\r",
													"                        \"title\": \"title\"\r",
													"                    };\r",
													"                    pm.sendRequest({\r",
													"                        url: pm.collectionVariables.get(\"baseUrl\") + '/users/' + pm.collectionVariables.get('uid') + '/events',\r",
													"                        method: 'POST',\r",
													"                        body: JSON.stringify(body),\r",
													"                        header: {'Content-Type': 'application/json'}\r",
													"                    }, (error, response) => {\r",
													"                        if(error || (response.code >= 400 && response.code <= 599)) {\r",
													"                            throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
													"                        }\r",
													"                        pm.collectionVariables.set('eid', response.json().id);\r",
													"                        pm.collectionVariables.set('response', body)\r",
													"                    });\r",
													"                });\r",
													"            });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Test event\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.state).to.eql(\"CANCELED\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events/:eventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events",
												":eventId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{uid}}",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "eventId",
													"value": "{{eid}}",
													"description": "(Required) id отменяемого события"
												}
											]
										},
										"description": "Обратите внимание: Отменить можно только событие в состоянии ожидания модерации."
									},
									"response": [
										{
											"name": "Событие обновлено",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"annotation\": \"Сап прогулки по рекам и каналам – это возможность увидеть Практикбург с другого ракурса\",\n  \"category\": 3,\n  \"description\": \"От английского SUP - Stand Up Paddle — \\\"стоя на доске с веслом\\\", гавайская разновидность сёрфинга, в котором серфер, стоя на доске, катается на волнах и при этом гребет веслом, а не руками, как в классическом серфинге.\",\n  \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n  \"eventId\": 1,\n  \"paid\": true,\n  \"participantLimit\": 7,\n  \"title\": \"Сап прогулки по рекам и каналам\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/events/:eventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"events",
														":eventId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "32652613",
															"description": "(Required) id текущего пользователя"
														},
														{
															"key": "eventId",
															"value": "32652613",
															"description": "(Required) id отменяемого события"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"annotation\": \"Эксклюзивность нашего шоу гарантирует привлечение максимальной зрительской аудитории\",\n  \"category\": {\n    \"name\": \"Концерты\",\n    \"id\": 1\n  },\n  \"initiator\": {\n    \"id\": 3,\n    \"name\": \"Фёдоров Матвей\"\n  },\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"title\": \"Знаменитое шоу \\\"Летающая кукуруза\\\"\",\n  \"confirmedRequests\": 5,\n  \"createdOn\": \"yyyy-MM-dd HH:mm:ss\",\n  \"description\": \"Что получится, если соединить кукурузу и полёт? Создатели \\\"Шоу летающей кукурузы\\\" испытали эту идею на практике и воплотили в жизнь инновационный проект, предлагающий свежий взгляд на развлечения...\",\n  \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n  \"id\": 1,\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"publishedOn\": \"yyyy-MM-dd HH:mm:ss\",\n  \"requestModeration\": true,\n  \"state\": \"PUBLISHED\",\n  \"views\": 999\n}"
										},
										{
											"name": "Запрос составлен с ошибкой",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"annotation\": \"Сап прогулки по рекам и каналам – это возможность увидеть Практикбург с другого ракурса\",\n  \"category\": 3,\n  \"description\": \"От английского SUP - Stand Up Paddle — \\\"стоя на доске с веслом\\\", гавайская разновидность сёрфинга, в котором серфер, стоя на доске, катается на волнах и при этом гребет веслом, а не руками, как в классическом серфинге.\",\n  \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n  \"eventId\": 1,\n  \"paid\": true,\n  \"participantLimit\": 7,\n  \"title\": \"Сап прогулки по рекам и каналам\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/events/:eventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"events",
														":eventId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "32652613",
															"description": "(Required) id текущего пользователя"
														},
														{
															"key": "eventId",
															"value": "32652613",
															"description": "(Required) id отменяемого события"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
										},
										{
											"name": "Не выполнены условия для совершения операции",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"annotation\": \"Сап прогулки по рекам и каналам – это возможность увидеть Практикбург с другого ракурса\",\n  \"category\": 3,\n  \"description\": \"От английского SUP - Stand Up Paddle — \\\"стоя на доске с веслом\\\", гавайская разновидность сёрфинга, в котором серфер, стоя на доске, катается на волнах и при этом гребет веслом, а не руками, как в классическом серфинге.\",\n  \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n  \"eventId\": 1,\n  \"paid\": true,\n  \"participantLimit\": 7,\n  \"title\": \"Сап прогулки по рекам и каналам\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/events/:eventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"events",
														":eventId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "32652613",
															"description": "(Required) id текущего пользователя"
														},
														{
															"key": "eventId",
															"value": "32652613",
															"description": "(Required) id отменяемого события"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
										},
										{
											"name": "Объект не найден",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"annotation\": \"Сап прогулки по рекам и каналам – это возможность увидеть Практикбург с другого ракурса\",\n  \"category\": 3,\n  \"description\": \"От английского SUP - Stand Up Paddle — \\\"стоя на доске с веслом\\\", гавайская разновидность сёрфинга, в котором серфер, стоя на доске, катается на волнах и при этом гребет веслом, а не руками, как в классическом серфинге.\",\n  \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n  \"eventId\": 1,\n  \"paid\": true,\n  \"participantLimit\": 7,\n  \"title\": \"Сап прогулки по рекам и каналам\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/events/:eventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"events",
														":eventId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "32652613",
															"description": "(Required) id текущего пользователя"
														},
														{
															"key": "eventId",
															"value": "32652613",
															"description": "(Required) id отменяемого события"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"status\": \"NOT_FOUND\",\n  \"reason\": \"The required object was not found.\",\n  \"message\": \"Event with id=21 was not found.\",\n  \"timestamp\": \"2022-09-07 09:10:50\"\n}"
										},
										{
											"name": "Запрос приводит к нарушению целостности данных",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"annotation\": \"Сап прогулки по рекам и каналам – это возможность увидеть Практикбург с другого ракурса\",\n  \"category\": 3,\n  \"description\": \"От английского SUP - Stand Up Paddle — \\\"стоя на доске с веслом\\\", гавайская разновидность сёрфинга, в котором серфер, стоя на доске, катается на волнах и при этом гребет веслом, а не руками, как в классическом серфинге.\",\n  \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n  \"eventId\": 1,\n  \"paid\": true,\n  \"participantLimit\": 7,\n  \"title\": \"Сап прогулки по рекам и каналам\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/events/:eventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"events",
														":eventId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "32652613",
															"description": "(Required) id текущего пользователя"
														},
														{
															"key": "eventId",
															"value": "32652613",
															"description": "(Required) id отменяемого события"
														}
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"status\": \"CONFLICT\",\n  \"reason\": \"Integrity constraint has been violated\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:47:58\"\n}"
										},
										{
											"name": "Внутренняя ошибка сервера",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"annotation\": \"Сап прогулки по рекам и каналам – это возможность увидеть Практикбург с другого ракурса\",\n  \"category\": 3,\n  \"description\": \"От английского SUP - Stand Up Paddle — \\\"стоя на доске с веслом\\\", гавайская разновидность сёрфинга, в котором серфер, стоя на доске, катается на волнах и при этом гребет веслом, а не руками, как в классическом серфинге.\",\n  \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n  \"eventId\": 1,\n  \"paid\": true,\n  \"participantLimit\": 7,\n  \"title\": \"Сап прогулки по рекам и каналам\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/events/:eventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"events",
														":eventId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "32652613",
															"description": "(Required) id текущего пользователя"
														},
														{
															"key": "eventId",
															"value": "32652613",
															"description": "(Required) id отменяемого события"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"status\": \"INTERNAL_SERVER_ERROR\",\n  \"reason\": \"Error occurred\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:23:27\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "Получение событий, добавленных текущим пользователем",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var body = {};\r",
											"let mail = 'email' + pm.collectionVariables.get(\"usersCount\") + '@yandex.ru';\r",
											"pm.collectionVariables.set('mail', mail)\r",
											"pm.collectionVariables.set(\"usersCount\", 1 + pm.collectionVariables.get(\"usersCount\"))\r",
											"body = {\r",
											"    'email': mail,\r",
											"    'name': 'Usver'\r",
											"};\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"baseUrl\") + '/admin/users',\r",
											"    method: 'POST',\r",
											"    body: JSON.stringify(body),\r",
											"    header: {'Content-Type': 'application/json'}\r",
											"    }, (error, response) => {\r",
											"        if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"            throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"        }\r",
											"        pm.collectionVariables.set('response', response.json())\r",
											"        pm.collectionVariables.set('uid', parseInt(response.json().id))\r",
											"        var body = {};\r",
											"        let name = 'name' + pm.collectionVariables.get(\"usersCount\");\r",
											"        pm.collectionVariables.set('name', name)\r",
											"        pm.collectionVariables.set(\"usersCount\", 1 + pm.collectionVariables.get(\"usersCount\"))\r",
											"        body = {\r",
											"            'name': name\r",
											"        };\r",
											"        pm.sendRequest({\r",
											"            url: pm.collectionVariables.get(\"baseUrl\") + '/admin/categories',\r",
											"            method: 'POST',\r",
											"            body: JSON.stringify(body),\r",
											"            header: {'Content-Type': 'application/json'}\r",
											"            }, (error, response) => {\r",
											"                if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"                    throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"                }\r",
											"                pm.collectionVariables.set('catid', response.json().id);\r",
											"                pm.collectionVariables.set('catname', response.json().name)\r",
											"               \r",
											"                    body = {\r",
											"                        \"annotation\": \"annotation169119129619612961691616161651651\",\r",
											"                        \"category\": pm.collectionVariables.get('catid'),\r",
											"                        \"description\": \"description9498465165165161616516516516516\",\r",
											"                        \"eventDate\": \"2095-09-06 13:30:38\",\r",
											"                        \"location\": {\r",
											"                            \"lat\": 10,\r",
											"                            \"lon\": 580\r",
											"                        },\r",
											"                        \"paid\": true,\r",
											"                        \"participantLimit\": 0,\r",
											"                        \"requestModeration\": true,\r",
											"                        \"title\": \"title\"\r",
											"                    };\r",
											"                    pm.sendRequest({\r",
											"                        url: pm.collectionVariables.get(\"baseUrl\") + '/users/' + pm.collectionVariables.get('uid') + '/events',\r",
											"                        method: 'POST',\r",
											"                        body: JSON.stringify(body),\r",
											"                        header: {'Content-Type': 'application/json'}\r",
											"                    }, (error, response) => {\r",
											"                        if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"                            throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"                        }\r",
											"                        pm.collectionVariables.set('response', response.json());\r",
											"                    });\r",
											"                });\r",
											"            });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test event\", function () {\r",
											"    var jsonData = pm.response.json()[0];\r",
											"    pm.expect(jsonData.annotation).to.eql(pm.collectionVariables.get('response').annotation);\r",
											"    pm.expect(jsonData.category.id).to.eql(pm.collectionVariables.get('response').category.id);\r",
											"    pm.expect(jsonData.eventDate).to.eql(pm.collectionVariables.get('response').eventDate);\r",
											"    pm.expect(jsonData.initiator.id).to.eql(pm.collectionVariables.get('uid'));\r",
											"    pm.expect(jsonData.email).to.eql(pm.collectionVariables.get('response').email);\r",
											"    pm.expect(jsonData.title).to.eql(pm.collectionVariables.get('response').title);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events?from=0&size=1000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events"
									],
									"query": [
										{
											"key": "from",
											"value": "0",
											"description": "количество элементов, которые нужно пропустить для формирования текущего набора"
										},
										{
											"key": "size",
											"value": "1000",
											"description": "количество элементов в наборе"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}",
											"description": "(Required) id текущего пользователя"
										}
									]
								}
							},
							"response": [
								{
									"name": "События найдены",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events?from=0&size=10",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events"
											],
											"query": [
												{
													"key": "from",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id текущего пользователя"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"annotation\": \"Эксклюзивность нашего шоу гарантирует привлечение максимальной зрительской аудитории\",\n    \"category\": {\n      \"name\": \"Концерты\",\n      \"id\": 1\n    },\n    \"initiator\": {\n      \"id\": 3,\n      \"name\": \"Фёдоров Матвей\"\n    },\n    \"title\": \"Знаменитое шоу \\\"Летающая кукуруза\\\"\",\n    \"confirmedRequests\": 5,\n    \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n    \"id\": 1,\n    \"paid\": true,\n    \"views\": 999\n  },\n  {\n    \"annotation\": \"Эксклюзивность нашего шоу гарантирует привлечение максимальной зрительской аудитории\",\n    \"category\": {\n      \"name\": \"Концерты\",\n      \"id\": 1\n    },\n    \"initiator\": {\n      \"id\": 3,\n      \"name\": \"Фёдоров Матвей\"\n    },\n    \"title\": \"Знаменитое шоу \\\"Летающая кукуруза\\\"\",\n    \"confirmedRequests\": 5,\n    \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n    \"id\": 1,\n    \"paid\": true,\n    \"views\": 999\n  }\n]"
								},
								{
									"name": "Запрос составлен с ошибкой",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events?from=0&size=10",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events"
											],
											"query": [
												{
													"key": "from",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id текущего пользователя"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Не выполнены условия для совершения операции",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events?from=0&size=10",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events"
											],
											"query": [
												{
													"key": "from",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id текущего пользователя"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Объект не найден",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events?from=0&size=10",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events"
											],
											"query": [
												{
													"key": "from",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id текущего пользователя"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"NOT_FOUND\",\n  \"reason\": \"The required object was not found.\",\n  \"message\": \"Event with id=21 was not found.\",\n  \"timestamp\": \"2022-09-07 09:10:50\"\n}"
								},
								{
									"name": "Запрос приводит к нарушению целостности данных",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events?from=0&size=10",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events"
											],
											"query": [
												{
													"key": "from",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id текущего пользователя"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"CONFLICT\",\n  \"reason\": \"Integrity constraint has been violated\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:47:58\"\n}"
								},
								{
									"name": "Внутренняя ошибка сервера",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events?from=0&size=10",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events"
											],
											"query": [
												{
													"key": "from",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id текущего пользователя"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"INTERNAL_SERVER_ERROR\",\n  \"reason\": \"Error occurred\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:23:27\"\n}"
								}
							]
						},
						{
							"name": "Изменение события добавленного текущим пользователем",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var body = {};\r",
											"let mail = \"email\" + pm.collectionVariables.get(\"usersCount\") + \"@gmail.com\";\r",
											"pm.collectionVariables.set(\"mail\", mail);\r",
											"pm.collectionVariables.set(\"usersCount\", pm.collectionVariables.get(\"usersCount\") + 1);\r",
											"body = {\r",
											"    email: mail,\r",
											"    name: \"Usver\",\r",
											"};\r",
											"\r",
											"pm.sendRequest(\r",
											"    {\r",
											"        url: pm.collectionVariables.get(\"baseUrl\") + \"/admin/users\",\r",
											"        method: \"POST\",\r",
											"        body: JSON.stringify(body),\r",
											"        header: { \"Content-Type\": \"application/json\" },\r",
											"    },\r",
											"    (error, response) => {\r",
											"        if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"            throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"        }\r",
											"        pm.collectionVariables.set('reqid', response.json().id);\r",
											"        pm.collectionVariables.set(\"response\", response.json());\r",
											"        pm.collectionVariables.set(\"uid\", response.json().id);\r",
											"        var body = {};\r",
											"        let name = \"name\" + pm.collectionVariables.get(\"usersCount\");\r",
											"        pm.collectionVariables.set(\"name\", name);\r",
											"        pm.collectionVariables.set(\"usersCount\", pm.collectionVariables.get(\"usersCount\") + 1);\r",
											"        body = {\r",
											"            name: name,\r",
											"        };\r",
											"        pm.sendRequest(\r",
											"            {\r",
											"                url:\r",
											"                    pm.collectionVariables.get(\"baseUrl\") + \"/admin/categories\",\r",
											"                method: \"POST\",\r",
											"                body: JSON.stringify(body),\r",
											"                header: { \"Content-Type\": \"application/json\" },\r",
											"            },\r",
											"            (error, response) => {\r",
											"                if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"                    throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"                }\r",
											"                pm.collectionVariables.set(\"catid\", response.json().id);\r",
											"                pm.collectionVariables.set(\"catname\", response.json().name);\r",
											"                body = {\r",
											"                    annotation: \"annotation169119129619612961691616161651651\",\r",
											"                    category: pm.collectionVariables.get(\"catid\"),\r",
											"                    description: \"description9498465165165161616516516516516\",\r",
											"                    eventDate: \"2095-09-06 13:30:38\",\r",
											"                    location: {\r",
											"                        lat: 10,\r",
											"                        lon: 580,\r",
											"                    },\r",
											"                    paid: true,\r",
											"                    participantLimit: 0,\r",
											"                    requestModeration: true,\r",
											"                    title: \"title\",\r",
											"                };\r",
											"                pm.sendRequest(\r",
											"                    {\r",
											"                        url:\r",
											"                            pm.collectionVariables.get(\"baseUrl\") +\r",
											"                            \"/users/\" +\r",
											"                            pm.collectionVariables.get(\"uid\") +\r",
											"                            \"/events\",\r",
											"                        method: \"POST\",\r",
											"                        body: JSON.stringify(body),\r",
											"                        header: { \"Content-Type\": \"application/json\" },\r",
											"                    },\r",
											"                    (error, response) => {\r",
											"                        if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"                            throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"                        }\r",
											"                        pm.collectionVariables.set(\"response\", response.json());\r",
											"                        pm.collectionVariables.set(\"eid\", response.json().id);\r",
											"                        pm.collectionVariables.set(\"response\", response.json());\r",
											"                        pm.collectionVariables.set(\"eid\", response.json().id);\r",
											"                        body = {\r",
											"                            annotation:\r",
											"                                \"Сап прогулки по рекам и каналам – это возможность увидеть Практикбург с другого ракурса\",\r",
											"                            category: pm.collectionVariables.get(\"catid\"),\r",
											"                            description:\r",
											"                                'От английского SUP - Stand Up Paddle — \"стоя на доске с веслом\", гавайская разновидность сёрфинга, в котором серфер, стоя на доске, катается на волнах и при этом гребет веслом, а не руками, как в классическом серфинге.',\r",
											"                            eventDate: \"2027-09-11 23:02:19\",\r",
											"                            eventId: pm.collectionVariables.get(\"eid\"),\r",
											"                            paid: true,\r",
											"                            participantLimit: 20,\r",
											"                            title: \"Сап прогулки по рекам и каналам\",\r",
											"                        };\r",
											"                        pm.collectionVariables.set(\"newDataToSet\", body);\r",
											"                        pm.collectionVariables.set(\r",
											"                            \"request_body\",\r",
											"                            JSON.stringify(body)\r",
											"                        );\r",
											"\r",
											"                    }\r",
											"                );\r",
											"            }\r",
											"        );\r",
											"    }\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test event\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var newDataToSet = pm.collectionVariables.get('newDataToSet')\r",
											"    pm.expect(jsonData.annotation).to.eql(newDataToSet.annotation);\r",
											"    pm.expect(jsonData.eventDate).to.eql(newDataToSet.eventDate);\r",
											"    pm.expect(jsonData.description).to.eql(newDataToSet.description);\r",
											"    pm.expect(jsonData.paid).to.eql(newDataToSet.paid);\r",
											"    pm.expect(jsonData.participantLimit).to.eql(newDataToSet.participantLimit);\r",
											"    pm.expect(jsonData.state).to.eql(\"PENDING\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}",
											"description": "(Required) id текущего пользователя"
										}
									]
								},
								"description": "Обратите внимание:\n- изменить можно только отмененные события или события в состоянии ожидания модерации\n- дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента\n"
							},
							"response": [
								{
									"name": "Событие обновлено",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"annotation\": \"Сап прогулки по рекам и каналам – это возможность увидеть Практикбург с другого ракурса\",\n  \"category\": 3,\n  \"description\": \"От английского SUP - Stand Up Paddle — \\\"стоя на доске с веслом\\\", гавайская разновидность сёрфинга, в котором серфер, стоя на доске, катается на волнах и при этом гребет веслом, а не руками, как в классическом серфинге.\",\n  \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n  \"eventId\": 1,\n  \"paid\": true,\n  \"participantLimit\": 7,\n  \"title\": \"Сап прогулки по рекам и каналам\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events"
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id текущего пользователя"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"annotation\": \"Эксклюзивность нашего шоу гарантирует привлечение максимальной зрительской аудитории\",\n  \"category\": {\n    \"name\": \"Концерты\",\n    \"id\": 1\n  },\n  \"initiator\": {\n    \"id\": 3,\n    \"name\": \"Фёдоров Матвей\"\n  },\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"title\": \"Знаменитое шоу \\\"Летающая кукуруза\\\"\",\n  \"confirmedRequests\": 5,\n  \"createdOn\": \"yyyy-MM-dd HH:mm:ss\",\n  \"description\": \"Что получится, если соединить кукурузу и полёт? Создатели \\\"Шоу летающей кукурузы\\\" испытали эту идею на практике и воплотили в жизнь инновационный проект, предлагающий свежий взгляд на развлечения...\",\n  \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n  \"id\": 1,\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"publishedOn\": \"yyyy-MM-dd HH:mm:ss\",\n  \"requestModeration\": true,\n  \"state\": \"PUBLISHED\",\n  \"views\": 999\n}"
								},
								{
									"name": "Запрос составлен с ошибкой",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"annotation\": \"Сап прогулки по рекам и каналам – это возможность увидеть Практикбург с другого ракурса\",\n  \"category\": 3,\n  \"description\": \"От английского SUP - Stand Up Paddle — \\\"стоя на доске с веслом\\\", гавайская разновидность сёрфинга, в котором серфер, стоя на доске, катается на волнах и при этом гребет веслом, а не руками, как в классическом серфинге.\",\n  \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n  \"eventId\": 1,\n  \"paid\": true,\n  \"participantLimit\": 7,\n  \"title\": \"Сап прогулки по рекам и каналам\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events"
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id текущего пользователя"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Не выполнены условия для совершения операции",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"annotation\": \"Сап прогулки по рекам и каналам – это возможность увидеть Практикбург с другого ракурса\",\n  \"category\": 3,\n  \"description\": \"От английского SUP - Stand Up Paddle — \\\"стоя на доске с веслом\\\", гавайская разновидность сёрфинга, в котором серфер, стоя на доске, катается на волнах и при этом гребет веслом, а не руками, как в классическом серфинге.\",\n  \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n  \"eventId\": 1,\n  \"paid\": true,\n  \"participantLimit\": 7,\n  \"title\": \"Сап прогулки по рекам и каналам\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events"
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id текущего пользователя"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Объект не найден",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"annotation\": \"Сап прогулки по рекам и каналам – это возможность увидеть Практикбург с другого ракурса\",\n  \"category\": 3,\n  \"description\": \"От английского SUP - Stand Up Paddle — \\\"стоя на доске с веслом\\\", гавайская разновидность сёрфинга, в котором серфер, стоя на доске, катается на волнах и при этом гребет веслом, а не руками, как в классическом серфинге.\",\n  \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n  \"eventId\": 1,\n  \"paid\": true,\n  \"participantLimit\": 7,\n  \"title\": \"Сап прогулки по рекам и каналам\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events"
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id текущего пользователя"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"NOT_FOUND\",\n  \"reason\": \"The required object was not found.\",\n  \"message\": \"Event with id=21 was not found.\",\n  \"timestamp\": \"2022-09-07 09:10:50\"\n}"
								},
								{
									"name": "Запрос приводит к нарушению целостности данных",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"annotation\": \"Сап прогулки по рекам и каналам – это возможность увидеть Практикбург с другого ракурса\",\n  \"category\": 3,\n  \"description\": \"От английского SUP - Stand Up Paddle — \\\"стоя на доске с веслом\\\", гавайская разновидность сёрфинга, в котором серфер, стоя на доске, катается на волнах и при этом гребет веслом, а не руками, как в классическом серфинге.\",\n  \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n  \"eventId\": 1,\n  \"paid\": true,\n  \"participantLimit\": 7,\n  \"title\": \"Сап прогулки по рекам и каналам\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events"
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id текущего пользователя"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"CONFLICT\",\n  \"reason\": \"Integrity constraint has been violated\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:47:58\"\n}"
								},
								{
									"name": "Внутренняя ошибка сервера",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"annotation\": \"Сап прогулки по рекам и каналам – это возможность увидеть Практикбург с другого ракурса\",\n  \"category\": 3,\n  \"description\": \"От английского SUP - Stand Up Paddle — \\\"стоя на доске с веслом\\\", гавайская разновидность сёрфинга, в котором серфер, стоя на доске, катается на волнах и при этом гребет веслом, а не руками, как в классическом серфинге.\",\n  \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n  \"eventId\": 1,\n  \"paid\": true,\n  \"participantLimit\": 7,\n  \"title\": \"Сап прогулки по рекам и каналам\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events"
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id текущего пользователя"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"INTERNAL_SERVER_ERROR\",\n  \"reason\": \"Error occurred\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:23:27\"\n}"
								}
							]
						},
						{
							"name": "Добавление нового события",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var body = {};\r",
											"let mail = 'email' + pm.collectionVariables.get(\"usersCount\") + '@yandex.ru';\r",
											"pm.collectionVariables.set('mail', mail)\r",
											"pm.collectionVariables.set(\"usersCount\", pm.collectionVariables.get(\"usersCount\") + 1)\r",
											"body = {\r",
											"    'email': mail,\r",
											"    'name': 'Usver'\r",
											"};\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"baseUrl\") + '/admin/users',\r",
											"    method: 'POST',\r",
											"    body: JSON.stringify(body),\r",
											"    header: {'Content-Type': 'application/json'}\r",
											"}, \r",
											"(error, response) => {\r",
											"    if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"        throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"    }\r",
											"    pm.collectionVariables.set('response', response.json())\r",
											"    pm.collectionVariables.set('uid', response.json().id)\r",
											"    var body = {};\r",
											"    let name = 'name' + pm.collectionVariables.get(\"usersCount\");\r",
											"    pm.collectionVariables.set('name', name)\r",
											"    pm.collectionVariables.set(\"usersCount\", pm.collectionVariables.get(\"usersCount\") + 1)\r",
											"    body = {\r",
											"        'name': name\r",
											"    };\r",
											"    pm.sendRequest({\r",
											"        url: pm.collectionVariables.get(\"baseUrl\") + '/admin/categories',\r",
											"        method: 'POST',\r",
											"        body: JSON.stringify(body),\r",
											"        header: {'Content-Type': 'application/json'}\r",
											"    }, \r",
											"    (error, response) => {\r",
											"        if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"            throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"        }\r",
											"        pm.collectionVariables.set('catid', response.json().id);\r",
											"        pm.collectionVariables.set('catname', response.json().name)\r",
											"        body = {\r",
											"            \"annotation\": \"annotatiron 6161616516161898798516541651468549684\",\r",
											"            \"category\": parseInt(pm.collectionVariables.get('catid')),\r",
											"            \"description\": \"descriptrion 6161616516161898798516541651468549684\",\r",
											"            \"eventDate\": \"2035-02-10 17:17:42\",\r",
											"            \"location\": {\r",
											"                \"lat\": 10,\r",
											"                \"lon\": 580\r",
											"            },\r",
											"            \"paid\": true,\r",
											"            \"participantLimit\": 10,\r",
											"            \"requestModeration\": true,\r",
											"            \"title\": \"title\"\r",
											"        };\r",
											"        pm.collectionVariables.set('response', body)\r",
											"        pm.collectionVariables.set('request_body', JSON.stringify(body));\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Test event\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.annotation).to.eql(pm.collectionVariables.get('response').annotation);\r",
											"    pm.expect(jsonData.category.id).to.eql(pm.collectionVariables.get('catid'));\r",
											"    pm.expect(jsonData.description).to.eql(pm.collectionVariables.get('response').description);\r",
											"    pm.expect(jsonData.eventDate).to.eql(pm.collectionVariables.get('response').eventDate);\r",
											"    pm.expect(jsonData.initiator.id).to.eql(pm.collectionVariables.get('uid'));\r",
											"    pm.expect(jsonData.email).to.eql(pm.collectionVariables.get('response').email);\r",
											"    pm.expect(jsonData.title).to.eql(pm.collectionVariables.get('response').title);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}",
											"description": "(Required) id текущего пользователя"
										}
									]
								},
								"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
							},
							"response": [
								{
									"name": "Событие добавлено",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"annotation\": \"Сплав на байдарках похож на полет.\",\n  \"category\": 2,\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"title\": \"Сплав на байдарках\",\n  \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"requestModeration\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events"
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id текущего пользователя"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"annotation\": \"Эксклюзивность нашего шоу гарантирует привлечение максимальной зрительской аудитории\",\n  \"category\": {\n    \"name\": \"Концерты\",\n    \"id\": 1\n  },\n  \"initiator\": {\n    \"id\": 3,\n    \"name\": \"Фёдоров Матвей\"\n  },\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"title\": \"Знаменитое шоу \\\"Летающая кукуруза\\\"\",\n  \"confirmedRequests\": 5,\n  \"createdOn\": \"yyyy-MM-dd HH:mm:ss\",\n  \"description\": \"Что получится, если соединить кукурузу и полёт? Создатели \\\"Шоу летающей кукурузы\\\" испытали эту идею на практике и воплотили в жизнь инновационный проект, предлагающий свежий взгляд на развлечения...\",\n  \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n  \"id\": 1,\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"publishedOn\": \"yyyy-MM-dd HH:mm:ss\",\n  \"requestModeration\": true,\n  \"state\": \"PUBLISHED\",\n  \"views\": 999\n}"
								},
								{
									"name": "Запрос составлен с ошибкой",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"annotation\": \"Сплав на байдарках похож на полет.\",\n  \"category\": 2,\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"title\": \"Сплав на байдарках\",\n  \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"requestModeration\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events"
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id текущего пользователя"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Не выполнены условия для совершения операции",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"annotation\": \"Сплав на байдарках похож на полет.\",\n  \"category\": 2,\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"title\": \"Сплав на байдарках\",\n  \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"requestModeration\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events"
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id текущего пользователя"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Объект не найден",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"annotation\": \"Сплав на байдарках похож на полет.\",\n  \"category\": 2,\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"title\": \"Сплав на байдарках\",\n  \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"requestModeration\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events"
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id текущего пользователя"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"NOT_FOUND\",\n  \"reason\": \"The required object was not found.\",\n  \"message\": \"Event with id=21 was not found.\",\n  \"timestamp\": \"2022-09-07 09:10:50\"\n}"
								},
								{
									"name": "Запрос приводит к нарушению целостности данных",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"annotation\": \"Сплав на байдарках похож на полет.\",\n  \"category\": 2,\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"title\": \"Сплав на байдарках\",\n  \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"requestModeration\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events"
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id текущего пользователя"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"CONFLICT\",\n  \"reason\": \"Integrity constraint has been violated\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:47:58\"\n}"
								},
								{
									"name": "Внутренняя ошибка сервера",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"annotation\": \"Сплав на байдарках похож на полет.\",\n  \"category\": 2,\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"title\": \"Сплав на байдарках\",\n  \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"requestModeration\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events"
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id текущего пользователя"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"INTERNAL_SERVER_ERROR\",\n  \"reason\": \"Error occurred\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:23:27\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "requests",
					"item": [
						{
							"name": "Получение информации о заявках текущего пользователя на участие в чужих событиях",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var body = {};\r",
											"let mail = 'email' + pm.collectionVariables.get(\"usersCount\") + '@yandex.ru';\r",
											"pm.collectionVariables.set('mail', mail)\r",
											"pm.collectionVariables.set(\"usersCount\", 1 + pm.collectionVariables.get(\"usersCount\"))\r",
											"body = {\r",
											"    'email': mail,\r",
											"    'name': 'Usver'\r",
											"};\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"baseUrl\") + '/admin/users',\r",
											"    method: 'POST',\r",
											"    body: JSON.stringify(body),\r",
											"    header: {'Content-Type': 'application/json'}\r",
											"    }, (error, response) => {\r",
											"        if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"            throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"        }\r",
											"        pm.collectionVariables.set('response', response.json())\r",
											"        pm.collectionVariables.set('uid', parseInt(response.json().id))\r",
											"        var body = {};\r",
											"        let name = 'name' + pm.collectionVariables.get(\"usersCount\");\r",
											"        pm.collectionVariables.set('name', name)\r",
											"        pm.collectionVariables.set(\"usersCount\", 1 + pm.collectionVariables.get(\"usersCount\"))\r",
											"        body = {\r",
											"            'name': name\r",
											"        };\r",
											"        pm.sendRequest({\r",
											"            url: pm.collectionVariables.get(\"baseUrl\") + '/admin/categories',\r",
											"            method: 'POST',\r",
											"            body: JSON.stringify(body),\r",
											"            header: {'Content-Type': 'application/json'}\r",
											"            }, (error, response) => {\r",
											"                if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"                    throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"                }\r",
											"                pm.collectionVariables.set('catid', response.json().id);\r",
											"                pm.collectionVariables.set('catname', response.json().name)\r",
											"               \r",
											"                    body = {\r",
											"                        \"annotation\": \"annotation169119129619612961691616161651651\",\r",
											"                        \"category\": pm.collectionVariables.get('catid'),\r",
											"                        \"description\": \"description9498465165165161616516516516516\",\r",
											"                        \"eventDate\": \"2095-09-06 13:30:38\",\r",
											"                        \"location\": {\r",
											"                            \"lat\": 10,\r",
											"                            \"lon\": 580\r",
											"                        },\r",
											"                        \"paid\": true,\r",
											"                        \"participantLimit\": 0,\r",
											"                        \"requestModeration\": true,\r",
											"                        \"title\": \"title\"\r",
											"                    };\r",
											"                    pm.sendRequest({\r",
											"                        url: pm.collectionVariables.get(\"baseUrl\") + '/users/' + pm.collectionVariables.get('uid') + '/events',\r",
											"                        method: 'POST',\r",
											"                        body: JSON.stringify(body),\r",
											"                        header: {'Content-Type': 'application/json'}\r",
											"                    }, (error, response) => {\r",
											"                        if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"                            throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"                        }\r",
											"                        pm.collectionVariables.set('eid', response.json().id);\r",
											"                        pm.collectionVariables.set('response', body)\r",
											"\r",
											"                        pm.sendRequest({\r",
											"                            url: pm.collectionVariables.get(\"baseUrl\") + '/admin/events/' + pm.collectionVariables.get('eid') + '/publish',\r",
											"                            method: 'PATCH'\r",
											"                        },(error, response) => {\r",
											"                            var body = {};\r",
											"                            let mail = 'email' + pm.collectionVariables.get(\"usersCount\") + '@yandex.ru';\r",
											"                            pm.collectionVariables.set('mail', mail)\r",
											"                            pm.collectionVariables.set(\"usersCount\", 1 + pm.collectionVariables.get(\"usersCount\"))\r",
											"                            body = {\r",
											"                                'email': mail,\r",
											"                                'name': 'Usver'\r",
											"                            };\r",
											"                            pm.sendRequest({\r",
											"                                url: pm.collectionVariables.get(\"baseUrl\") + '/admin/users',\r",
											"                                method: 'POST',\r",
											"                                body: JSON.stringify(body),\r",
											"                                header: {'Content-Type': 'application/json'}\r",
											"                                }, (error, response) => {\r",
											"                                    pm.collectionVariables.set('uid', response.json().id);\r",
											"\r",
											"                                    pm.sendRequest({\r",
											"                                        url: pm.collectionVariables.get(\"baseUrl\") + '/users/' + pm.collectionVariables.get('uid') + '/requests?eventId='+pm.collectionVariables.get('eid'),\r",
											"                                        method: 'POST'\r",
											"                                        }, (error, response) => {\r",
											"                                            \r",
											"                                            \r",
											"                                    });\r",
											"                            });\r",
											"                        });\r",
											"                    });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Test event\", function () {\r",
											"    var jsonData = pm.response.json()[0];\r",
											"    pm.expect(jsonData.event).to.eql(pm.collectionVariables.get('eid'));\r",
											"    pm.expect(jsonData.requester).to.eql(pm.collectionVariables.get('uid'));\r",
											"    pm.expect(jsonData.status).to.eql(\"PENDING\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/requests",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"requests"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}",
											"description": "(Required) id текущего пользователя"
										}
									]
								}
							},
							"response": [
								{
									"name": "Найдены запросы на участие",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/requests",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"requests"
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id текущего пользователя"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"created\": \"1963-08-11T07:29:21.024Z\",\n    \"event\": 1,\n    \"id\": 3,\n    \"requester\": 2,\n    \"status\": \"PENDING\"\n  },\n  {\n    \"created\": \"1995-09-06T16:03:26.967Z\",\n    \"event\": 1,\n    \"id\": 3,\n    \"requester\": 2,\n    \"status\": \"PENDING\"\n  }\n]"
								},
								{
									"name": "Запрос составлен с ошибкой",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/requests",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"requests"
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id текущего пользователя"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Не выполнены условия для совершения операции",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/requests",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"requests"
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id текущего пользователя"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Объект не найден",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/requests",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"requests"
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id текущего пользователя"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"NOT_FOUND\",\n  \"reason\": \"The required object was not found.\",\n  \"message\": \"Event with id=21 was not found.\",\n  \"timestamp\": \"2022-09-07 09:10:50\"\n}"
								},
								{
									"name": "Запрос приводит к нарушению целостности данных",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/requests",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"requests"
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id текущего пользователя"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"CONFLICT\",\n  \"reason\": \"Integrity constraint has been violated\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:47:58\"\n}"
								},
								{
									"name": "Внутренняя ошибка сервера",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/requests",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"requests"
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id текущего пользователя"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"INTERNAL_SERVER_ERROR\",\n  \"reason\": \"Error occurred\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:23:27\"\n}"
								}
							]
						},
						{
							"name": "Добавление запроса от текущего пользователя на участие в событии",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var body = {};\r",
											"let mail = 'email' + pm.collectionVariables.get(\"usersCount\") + '@yandex.ru';\r",
											"pm.collectionVariables.set('mail', mail)\r",
											"pm.collectionVariables.set(\"usersCount\", 1 + pm.collectionVariables.get(\"usersCount\"))\r",
											"body = {\r",
											"    'email': mail,\r",
											"    'name': 'Usver'\r",
											"};\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"baseUrl\") + '/admin/users',\r",
											"    method: 'POST',\r",
											"    body: JSON.stringify(body),\r",
											"    header: {'Content-Type': 'application/json'}\r",
											"    }, (error, response) => {\r",
											"        if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"            throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"        }\r",
											"        pm.collectionVariables.set('response', response.json())\r",
											"        pm.collectionVariables.set('uid', parseInt(response.json().id))\r",
											"        var body = {};\r",
											"        let name = 'name' + pm.collectionVariables.get(\"usersCount\");\r",
											"        pm.collectionVariables.set('name', name)\r",
											"        pm.collectionVariables.set(\"usersCount\", 1 + pm.collectionVariables.get(\"usersCount\"))\r",
											"        body = {\r",
											"            'name': name\r",
											"        };\r",
											"        pm.sendRequest({\r",
											"            url: pm.collectionVariables.get(\"baseUrl\") + '/admin/categories',\r",
											"            method: 'POST',\r",
											"            body: JSON.stringify(body),\r",
											"            header: {'Content-Type': 'application/json'}\r",
											"            }, (error, response) => {\r",
											"                if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"                    throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"                }\r",
											"                pm.collectionVariables.set('catid', response.json().id);\r",
											"                pm.collectionVariables.set('catname', response.json().name)\r",
											"               \r",
											"                    body = {\r",
											"                        \"annotation\": \"annotation169119129619612961691616161651651\",\r",
											"                        \"category\": pm.collectionVariables.get('catid'),\r",
											"                        \"description\": \"description9498465165165161616516516516516\",\r",
											"                        \"eventDate\": \"2095-09-06 13:30:38\",\r",
											"                        \"location\": {\r",
											"                            \"lat\": 10,\r",
											"                            \"lon\": 580\r",
											"                        },\r",
											"                        \"paid\": true,\r",
											"                        \"participantLimit\": 0,\r",
											"                        \"requestModeration\": true,\r",
											"                        \"title\": \"title\"\r",
											"                    };\r",
											"                    pm.sendRequest({\r",
											"                        url: pm.collectionVariables.get(\"baseUrl\") + '/users/' + pm.collectionVariables.get('uid') + '/events',\r",
											"                        method: 'POST',\r",
											"                        body: JSON.stringify(body),\r",
											"                        header: {'Content-Type': 'application/json'}\r",
											"                    }, (error, response) => {\r",
											"                        if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"                            throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"                        }\r",
											"                        pm.collectionVariables.set('eid', response.json().id);\r",
											"                        pm.collectionVariables.set('response', response.json());\r",
											"                        mail = 'email' + pm.collectionVariables.get(\"usersCount\") + '@yandex.ru';\r",
											"                        pm.collectionVariables.set('mail', mail)\r",
											"                        pm.collectionVariables.set(\"usersCount\", 1 + pm.collectionVariables.get(\"usersCount\"))\r",
											"                        body = {\r",
											"                            'email': mail,\r",
											"                            'name': 'Usver'\r",
											"                        };\r",
											"                        pm.sendRequest({\r",
											"                            url: pm.collectionVariables.get(\"baseUrl\") + '/admin/users',\r",
											"                            method: 'POST',\r",
											"                            body: JSON.stringify(body),\r",
											"                            header: {'Content-Type': 'application/json'}\r",
											"                            }, (error, response) => {\r",
											"                                if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"                                    throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"                                }\r",
											"                                pm.collectionVariables.set('uid', response.json().id)\r",
											"                                pm.sendRequest({\r",
											"                                url: pm.collectionVariables.get(\"baseUrl\") + '/admin/events/' + pm.collectionVariables.get(\"eid\") + '/publish',\r",
											"                                method: 'PATCH',\r",
											"                                body: JSON.stringify(body),\r",
											"                                header: {'Content-Type': 'application/json'}\r",
											"                                }, (error, response) => {\r",
											"                                    \r",
											"                            });\r",
											"                        });\r",
											"                    });\r",
											"                });\r",
											"            });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Test event\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"PENDING\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/requests?eventId={{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"requests"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{eid}}",
											"description": "(Required) id события"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}",
											"description": "(Required) id текущего пользователя"
										}
									]
								},
								"description": "Обратите внимание:\n- нельзя добавить повторный запрос\n- инициатор события не может добавить запрос на участие в своём событии\n- нельзя участвовать в неопубликованном событии\n- если у события достигнут лимит запросов на участие - необходимо вернуть ошибку\n- если для события отключена пре-модерация запросов на участие, то запрос должен автоматически перейти в состояние подтвержденного"
							},
							"response": [
								{
									"name": "Заявка создана",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/requests?eventId=32652613",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"requests"
											],
											"query": [
												{
													"key": "eventId",
													"value": "32652613"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id текущего пользователя"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"created\": \"1969-01-16T10:39:34.967Z\",\n  \"event\": 1,\n  \"id\": 3,\n  \"requester\": 2,\n  \"status\": \"PENDING\"\n}"
								},
								{
									"name": "Запрос составлен с ошибкой",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/requests?eventId=32652613",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"requests"
											],
											"query": [
												{
													"key": "eventId",
													"value": "32652613"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id текущего пользователя"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Не выполнены условия для совершения операции",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/requests?eventId=32652613",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"requests"
											],
											"query": [
												{
													"key": "eventId",
													"value": "32652613"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id текущего пользователя"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Объект не найден",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/requests?eventId=32652613",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"requests"
											],
											"query": [
												{
													"key": "eventId",
													"value": "32652613"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id текущего пользователя"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"NOT_FOUND\",\n  \"reason\": \"The required object was not found.\",\n  \"message\": \"Event with id=21 was not found.\",\n  \"timestamp\": \"2022-09-07 09:10:50\"\n}"
								},
								{
									"name": "Запрос приводит к нарушению целостности данных",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/requests?eventId=32652613",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"requests"
											],
											"query": [
												{
													"key": "eventId",
													"value": "32652613"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id текущего пользователя"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"CONFLICT\",\n  \"reason\": \"Integrity constraint has been violated\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:47:58\"\n}"
								},
								{
									"name": "Внутренняя ошибка сервера",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/requests?eventId=32652613",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"requests"
											],
											"query": [
												{
													"key": "eventId",
													"value": "32652613"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id текущего пользователя"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"INTERNAL_SERVER_ERROR\",\n  \"reason\": \"Error occurred\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:23:27\"\n}"
								}
							]
						},
						{
							"name": "Отмена своего запроса на участие в событии",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var body = {};\r",
											"let mail = \"email\" + pm.collectionVariables.get(\"usersCount\") + \"@yandex.ru\";\r",
											"pm.collectionVariables.set(\"mail\", mail);\r",
											"pm.collectionVariables.set(\"usersCount\", 1 + pm.collectionVariables.get(\"usersCount\"));\r",
											"body = {\r",
											"    email: mail,\r",
											"    name: \"Usver\",\r",
											"};\r",
											"\r",
											"pm.sendRequest(\r",
											"    {\r",
											"        url: pm.collectionVariables.get(\"baseUrl\") + \"/admin/users\",\r",
											"        method: \"POST\",\r",
											"        body: JSON.stringify(body),\r",
											"        header: { \"Content-Type\": \"application/json\" },\r",
											"    },\r",
											"    (error, response) => {\r",
											"        if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"            throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"        }\r",
											"        pm.collectionVariables.set('reqid', response.json().id);\r",
											"        pm.collectionVariables.set(\"response\", response.json());\r",
											"        pm.collectionVariables.set(\"uid\", parseInt(response.json().id));\r",
											"        var body = {};\r",
											"        let name = \"name\" + pm.collectionVariables.get(\"usersCount\");\r",
											"        pm.collectionVariables.set(\"name\", name);\r",
											"        pm.collectionVariables.set(\"usersCount\", 1 + pm.collectionVariables.get(\"usersCount\"));\r",
											"        body = {\r",
											"            name: name,\r",
											"        };\r",
											"        pm.sendRequest(\r",
											"            {\r",
											"                url:\r",
											"                    pm.collectionVariables.get(\"baseUrl\") + \"/admin/categories\",\r",
											"                method: \"POST\",\r",
											"                body: JSON.stringify(body),\r",
											"                header: { \"Content-Type\": \"application/json\" },\r",
											"            },\r",
											"            (error, response) => {\r",
											"                if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"                    throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"                }\r",
											"                pm.collectionVariables.set(\"catid\", response.json().id);\r",
											"                pm.collectionVariables.set(\"catname\", response.json().name);\r",
											"\r",
											"                body = {\r",
											"                    annotation: \"annotation169119129619612961691616161651651\",\r",
											"                    category: pm.collectionVariables.get(\"catid\"),\r",
											"                    description: \"description9498465165165161616516516516516\",\r",
											"                    eventDate: \"2095-09-06 13:30:38\",\r",
											"                    location: {\r",
											"                        lat: 10,\r",
											"                        lon: 580,\r",
											"                    },\r",
											"                    paid: true,\r",
											"                    participantLimit: 0,\r",
											"                    requestModeration: true,\r",
											"                    title: \"title\",\r",
											"                };\r",
											"                pm.sendRequest(\r",
											"                    {\r",
											"                        url:\r",
											"                            pm.collectionVariables.get(\"baseUrl\") +\r",
											"                            \"/users/\" +\r",
											"                            pm.collectionVariables.get(\"uid\") +\r",
											"                            \"/events\",\r",
											"                        method: \"POST\",\r",
											"                        body: JSON.stringify(body),\r",
											"                        header: { \"Content-Type\": \"application/json\" },\r",
											"                    },\r",
											"                    (error, response) => {\r",
											"                        if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"                            throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"                        }\r",
											"                        pm.collectionVariables.set(\"eid\", response.json().id);\r",
											"                        pm.collectionVariables.set(\"response\", response.json());\r",
											"                        mail =\r",
											"                            \"email\" +\r",
											"                            pm.collectionVariables.get(\"usersCount\") +\r",
											"                            \"@yandex.ru\";\r",
											"                        pm.collectionVariables.set(\"mail\", mail);\r",
											"                        pm.collectionVariables.set(\r",
											"                            \"usersCount\",\r",
											"                            1 + pm.collectionVariables.get(\"usersCount\")\r",
											"                        );\r",
											"                        body = {\r",
											"                            email: mail,\r",
											"                            name: \"Usver\",\r",
											"                        };\r",
											"                        pm.sendRequest(\r",
											"                            {\r",
											"                                url:\r",
											"                                    pm.collectionVariables.get(\"baseUrl\") +\r",
											"                                    \"/admin/users\",\r",
											"                                method: \"POST\",\r",
											"                                body: JSON.stringify(body),\r",
											"                                header: { \"Content-Type\": \"application/json\" },\r",
											"                            },\r",
											"                            (error, response) => {\r",
											"                                if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"                                    throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"                                }\r",
											"                                pm.collectionVariables.set(\"uid\", response.json().id);\r",
											"                                pm.sendRequest(\r",
											"                                    {\r",
											"                                        url:\r",
											"                                            pm.collectionVariables.get(\r",
											"                                                \"baseUrl\"\r",
											"                                            ) +\r",
											"                                            \"/admin/events/\" +\r",
											"                                            pm.collectionVariables.get(\"eid\") +\r",
											"                                            \"/publish\",\r",
											"                                        method: \"PATCH\",\r",
											"                                        body: JSON.stringify(body),\r",
											"                                        header: {\r",
											"                                            \"Content-Type\": \"application/json\",\r",
											"                                        },\r",
											"                                    },\r",
											"                                    (error, response) => {\r",
											"                                        if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"                                            throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"                                        }\r",
											"                                        pm.sendRequest(\r",
											"                                            {\r",
											"                                                url:\r",
											"                                                    pm.collectionVariables.get(\r",
											"                                                        \"baseUrl\"\r",
											"                                                    ) +\r",
											"                                                    \"/users/\" +\r",
											"                                                    pm.collectionVariables.get(\"uid\") +\r",
											"                                                    \"/requests?eventId=\" + \r",
											"                                                    pm.collectionVariables.get(\"eid\"),\r",
											"                                                method: \"POST\",\r",
											"                                                body: JSON.stringify(body),\r",
											"                                                header: {\r",
											"                                                    \"Content-Type\": \"application/json\",\r",
											"                                                },\r",
											"                                            },\r",
											"                                            (error, response) => {\r",
											"                                                if(error || (response.code >= 400 && response.code <= 599)) {\r",
											"                                                    throw new Error(\"Ошибка подготовки тестовых данных: \" + (error ? error : JSON.stringify(response.json())));\r",
											"                                                }\r",
											"                                                pm.collectionVariables.set('reqid', response.json().id);\r",
											"                                            }\r",
											"                                        );\r",
											"                                    }\r",
											"                                );\r",
											"                            }\r",
											"                        );\r",
											"                    }\r",
											"                );\r",
											"            }\r",
											"        );\r",
											"    }\r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Test cancel\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"CANCELED\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/requests/:requestId/cancel",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"requests",
										":requestId",
										"cancel"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}",
											"description": "(Required) id текущего пользователя"
										},
										{
											"key": "requestId",
											"value": "{{reqid}}",
											"description": "(Required) id запроса на участие"
										}
									]
								}
							},
							"response": [
								{
									"name": "Заявка отменена",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/requests/:requestId/cancel",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"requests",
												":requestId",
												"cancel"
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "requestId",
													"value": "32652613",
													"description": "(Required) id запроса на участие"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"created\": \"1969-01-16T10:39:34.967Z\",\n  \"event\": 1,\n  \"id\": 3,\n  \"requester\": 2,\n  \"status\": \"PENDING\"\n}"
								},
								{
									"name": "Запрос составлен с ошибкой",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/requests/:requestId/cancel",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"requests",
												":requestId",
												"cancel"
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "requestId",
													"value": "32652613",
													"description": "(Required) id запроса на участие"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Не выполнены условия для совершения операции",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/requests/:requestId/cancel",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"requests",
												":requestId",
												"cancel"
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "requestId",
													"value": "32652613",
													"description": "(Required) id запроса на участие"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
								},
								{
									"name": "Объект не найден",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/requests/:requestId/cancel",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"requests",
												":requestId",
												"cancel"
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "requestId",
													"value": "32652613",
													"description": "(Required) id запроса на участие"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"NOT_FOUND\",\n  \"reason\": \"The required object was not found.\",\n  \"message\": \"Event with id=21 was not found.\",\n  \"timestamp\": \"2022-09-07 09:10:50\"\n}"
								},
								{
									"name": "Запрос приводит к нарушению целостности данных",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/requests/:requestId/cancel",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"requests",
												":requestId",
												"cancel"
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "requestId",
													"value": "32652613",
													"description": "(Required) id запроса на участие"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"CONFLICT\",\n  \"reason\": \"Integrity constraint has been violated\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:47:58\"\n}"
								},
								{
									"name": "Внутренняя ошибка сервера",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/requests/:requestId/cancel",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"requests",
												":requestId",
												"cancel"
											],
											"variable": [
												{
													"key": "userId",
													"value": "32652613",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "requestId",
													"value": "32652613",
													"description": "(Required) id запроса на участие"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"INTERNAL_SERVER_ERROR\",\n  \"reason\": \"Error occurred\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:23:27\"\n}"
								}
							]
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId) {",
					"        return this.patch('/admin/events/' + eventId + '/publish');",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText);",
					"    }",
					"",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"",
					"                    resolve(response.json());",
					"                });",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + \" \" + pm.variables.replaceIn('{{$randomWord}}')",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: pm.variables.replaceIn('{{$randomInt}}'),",
					"                lon: pm.variables.replaceIn('{{$randomInt}}'),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "usersCount",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "request_body",
			"value": ""
		},
		{
			"key": "mail",
			"value": ""
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "uid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catname",
			"value": ""
		},
		{
			"key": "eid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "compid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "toCheck",
			"value": ""
		},
		{
			"key": "newDataToSet",
			"value": ""
		},
		{
			"key": "uid1",
			"value": ""
		},
		{
			"key": "reqid",
			"value": 1,
			"type": "number"
		}
	]
}